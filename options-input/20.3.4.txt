  -H:?AOTInline                                Perform method inlining in the AOT compiled native image. Default: + (enabled).
  -H:AOTInliningDepthToSizeRate=2.5            
  -H:AOTInliningSizeMaximum=300                
  -H:AOTInliningSizeMinimum=50                 
  -H:?AOTTrivialInline                         Perform trivial method inlining in the AOT compiled native image. Default: + (enabled).
  -H:?AOTVerifyOops                            Generate verify oop checks in AOT code. Default: - (disabled).
  -H:APIFunctionPrefix="graal_"                Prefix that is added to the names of API functions.
  -H:ASMInstructionProfiling=...               Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions.
                                               Compare with subclasses of Assembler.InstructionCounter. Default: None
  -H:?AbortOnBenchmarkCounterOverflow          Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters. Default: -
                                               (disabled). [Extra help available]
  -H:?AddAllCharsets                           Make all hosted charsets available at run time. Default: - (disabled).
  -H:?AddAllFileSystemProviders                Make all supported providers returned by FileSystemProvider.installedProviders() available at run time. Default: +
                                               (enabled).
  -H:AggregatedMetricsFile=...                 File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a
                                               more human readable format is used. If not specified, metrics are dumped to the console. Default: None
  -H:?AliasArrayTypeFlows                      Model all array type flows using a unique elements type flow abstraction. Default: + (enabled).
  -H:AlignedHeapChunkSize=1048576              The size of an aligned chunk.
  -H:AllocateInstancePrefetchLines=1           Number of cache lines to load after the object address using prefetch instructions.
  -H:AllocatePrefetchDistance=256              Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of
                                               new objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread
                                               has its own allocation point.
  -H:AllocatePrefetchInstr=0                   Sets the prefetch instruction to prefetch ahead of the allocation pointer. Possible values are from 0 to 3. The actual
                                               instructions behind the values depend on the platform.
  -H:AllocatePrefetchLines=3                   Number of cache lines to load after the array allocation using prefetch instructions.
  -H:AllocatePrefetchStepSize=16               Sets the step size (in bytes) for sequential prefetch instructions.
  -H:AllocatePrefetchStyle=1                   Generated code style for prefetch instructions: for 0 or less no prefetch instructions are generated and for 1 or more
                                               prefetch instructions are introduced after each allocation.
  -H:AllocationBeforePhysicalMemorySize=1048576
                                               Bytes that can be allocated before (re-)querying the physical memory size.
  -H:?AllocationProfiling                      Enable runtime profiling of allocation. Default: - (disabled).
  -H:?AllocationSiteSensitiveHeap              A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site.
                                               Default: - (disabled).
  -H:?AllowFoldMethods                         Allow MethodTypeFlow to see @Fold methods. Default: - (disabled).
  -H:?AllowIncompleteClasspath                 Allow image building with an incomplete class path: report type resolution errors at run time when they are accessed the
                                               first time, instead of during image building. Default: - (disabled).
  -H:?AllowVMInspection                        Enables features that allow the VM to be inspected during runtime. Default: - (disabled).
  -H:?AlwaysInlineIntrinsics                   Unconditionally inline intrinsics. Default: - (disabled).
  -H:?AlwaysInlineVTableStubs                  Default: - (disabled).
  -H:AnalysisContextSensitivity="insens"       Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens
                                               (context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive
                                               analysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap).
  -H:AnalysisSizeCutoff=8                      The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation.
  -H:AnalysisStatisticsFile=...                Analysis results statistics file. Default: None
  -H:?BenchmarkCounterPrintingCutoff           Use a cutoff to print only most significant counters. Default: + (enabled).
  -H:?BenchmarkCountersDumpDynamic             Dump dynamic counters. Default: + (enabled).
  -H:?BenchmarkCountersDumpStatic              Dump static counters. Default: - (disabled).
  -H:BenchmarkCountersFile=...                 File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human
                                               readable format is used. The fields in the CSV format are: category, group, name, value. Default: None
  -H:BenchmarkDynamicCounters=...              Turn on the benchmark counters. The format of this option is:. Default: None [Extra help available]
  -H:?BitcodeOptimizations                     Enable LLVM bitcode optimizations. Default: - (disabled).
  -H:?BootstrapInitializeOnly                  Do not compile anything on bootstrap but just initialize the compiler. Default: - (disabled).
  -H:BootstrapTimeout=15.0                     Maximum time in minutes to spend bootstrapping (0 to disable this limit).
  -H:BootstrapWatchDogCriticalRateRatio=0.25   Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables
                                               monitoring).
  -H:CAPCacheDir=""                            Directory where information generated by the CAnnotation Processor are cached.
  -H:CCompilerOption=...                       Provide custom C compiler option used for query code compilation. Default: None
  -H:CCompilerPath=...                         Provide custom path to C compiler used for query code compilation and linking. Default: None
  -H:CLibraryPath=...                          Search path for C libraries passed to the linker (list of comma-separated directories). Default: None
  -H:CPUFeatures=...                           Comma separated list of CPU features that will be used for image generation. The specific options available are platform
                                               dependent. For AMD64, SSE and SSE2 are enabled by default. Available features are: CX8, CMOV, FXSR, HT, MMX,
                                               AMD_3DNOW_PREFETCH, SSE3, SSSE3, SSE4A, SSE4_1, SSE4_2, POPCNT, LZCNT, TSC, TSCINV, AVX, AVX2, AES, ERMS, CLMUL, BMI1,
                                               BMI2, RTM, ADX, AVX512F, AVX512DQ, AVX512PF, AVX512ER, AVX512CD, AVX512BW, SHA, FMA. On AArch64, no features are
                                               enabled by default. Available features are: FP, ASIMD, EVTSTRM, AES, PMULL, SHA1, SHA2, CRC32, LSE, STXR_PREFETCH,
                                               A53MAC. Default: None
  -H:CStandard="C89"                           C standard to use in header files. Possible values are: [C89, C99, C11].
  -H:?CanOmitFrame                             Default: + (enabled).
  -H:?CanonicalGraphStringsCheckConstants      Exclude virtual nodes when dumping canonical text for graphs. Default: - (disabled).
  -H:?CanonicalGraphStringsExcludeVirtuals     Exclude virtual nodes when dumping canonical text for graphs. Default: + (enabled).
  -H:?CanonicalGraphStringsRemoveIdentities    Attempts to remove object identity hashes when dumping canonical text for graphs. Default: + (enabled).
  -H:?CheckRecurringCallbackOnNativeToJavaTransition
                                               Test whether a thread's recurring callback is pending on each transition from native code to Java. Default: -
                                               (disabled).
  -H:?CheckToolchain                           Check if native-toolchain is known to work with native-image. Default: + (enabled).
  -H:Class=""                                  Class containing the default entry point method. Optional if --shared is used.
  -H:ClassInitialization=...                   A comma-separated list of classes appended with their initialization strategy (':build_time', ':rerun', or ':run_time').
                                               Default: None
  -H:?ClearMetricsAfterBootstrap               Clear the debug metrics after bootstrap. Default: - (disabled).
  -H:CodeAlignment=16                          Alignment of AOT and JIT compiled code in bytes.
  -H:?CodeCacheCounters                        Count accesses to the image and runtime code info table. Default: - (disabled).
  -H:?CodeInfoEncoderCounters                  Statistics about code and deoptimization information. Default: - (disabled).
  -H:CodeInfoIndexGranularity=256              The granularity of the index for looking up code metadata. Should be a power of 2. Larger values make the index smaller,
                                               but access slower.
  -H:?CompilationBailoutAsFailure              Treat compilation bailouts like compilation failures. Default: - (disabled).
  -H:CompilationCountLimit=0                   The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit).
  -H:CompilationExcludePhases=...              Exclude certain phases from compilation, either unconditionally or with a method filter. Default: None
  -H:CompilationExpirationPeriod=300           Time limit in seconds before a compilation expires (0 to disable the limit). The compilation alarm will be implicitly
                                               disabled if assertions are enabled.
  -H:CompilationFailureAction=Silent           Specifies the action to take when compilation fails. [Extra help available]
  -H:CompilationWatchDogStackTraceInterval=60.0
                                               Interval in seconds between a watch dog reporting stack traces for long running compilations.
  -H:CompilationWatchDogStartDelay=0.0         Delay in seconds before watch dog monitoring a compilation (0 disables monitoring).
  -H:?CompileGraalWithC1Only                   In tiered mode compile Graal and JVMCI using optimized first tier code. Default: + (enabled).
  -H:CompilerBackend="lir"                     Backend used by the compiler.
  -H:CompilerConfiguration=...                 Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority
                                               is used. To see the set of available configurations, supply the value 'help' to this option. Default: None
  -H:?ConditionalElimination                   Default: + (enabled).
  -H:ConditionalEliminationMaxIterations=4     
  -H:ConfigurationFileDirectories=...          Directories directly containing configuration files for dynamic features at runtime. Default: None
  -H:ConfigurationResourceRoots=...            Resource path above configuration resources for dynamic features at runtime. Default: None
  -H:Count=...                                 Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value
                                               enables all counters unconditionally. Default: None
  -H:?CountWriteBarriers                       Instrument write barriers with counters. Default: - (disabled).
  -H:Counters=...                              Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables
                                               all counters unconditionally. Default: None
  -H:CrashAt=...                               Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation
                                               crashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout
                                               exception and a ':PermanentBailout' suffix will raise a permanent bailout exception. Default: None
  -H:CustomLD=""                               Path to a custom ld binary for LLVM linking.
  -H:?DashboardAll                             In the dashboard dump, include all available information about the native image (this takes precedence over more
                                               specific flags). Default: - (disabled).
  -H:?DashboardBgv                             Set dashboard to use BGV format for dump. Default: + (enabled).
  -H:?DashboardCode                            In the dashboard dump, include the breakdown of the code size across different packages. Default: - (disabled).
  -H:DashboardDump=...                         Enable dashboard dumps to the specified file. Default: None
  -H:?DashboardHeap                            In the dashboard dump, include the breakdown of the object sizes in the heap across different classes. Default: -
                                               (disabled).
  -H:?DashboardJson                            Set dashboard to use JSON format for dump. Default: - (disabled).
  -H:?DashboardPointsTo                        In the dashboard dump, include the information about the points-to analysis. Default: - (disabled).
  -H:?DashboardPretty                          Set dashboard to use pretty print in JSON format. Default: - (disabled).
  -H:?DeadlockWatchdogExitOnTimeout            Exit the image builder VM after printing call stacks. Default: + (enabled).
  -H:DeadlockWatchdogInterval=10               The interval in minutes between watchdog checks (0 disables the watchdog).
  -H:DebugInfoSourceCacheRoot="sources"        Directory under which to create source file cache for Application or GraalVM classes.
  -H:DebugInfoSourceSearchPath=...             Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files).
                                               Default: None
  -H:?DebugStubsAndSnippets                    Enable debug output for stub code generation and snippet preparation. Default: - (disabled).
  -H:?DeleteLocalSymbols                       Use linker option to remove all local symbols from image. Default: + (enabled).
  -H:?DeoptALot                                Default: - (disabled).
  -H:?DeoptAfterOSR                            Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of
                                               the method. Default: + (enabled).
  -H:?DeoptimizeAll                            Compiles all methods as deoptimization targets for testing. Default: - (disabled).
  -H:DeoptsToDisableOptimisticOptimization=40  
  -H:?DetailedAsserts                          Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled. Default: - (disabled).
  -H:?DetectUserDirectoriesInImageHeap         When set to true, the image generator verifies that the image heap does not contain a home directory as a substring.
                                               Default: - (disabled).
  -H:DiagnoseDumpLevel=3                       Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details.
                                               file:doc-files/CompilationFailureActionHelp.txt.
  -H:?DisableIntercept                         Disable intercepting exceptions in debug scopes. Default: - (disabled).
  -H:?DivertParameterReturningMethod           Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return. Default:
                                               + (enabled).
  -H:Dump=...                                  Filter pattern for specifying scopes in which dumping is enabled. Default: None [Extra help available]
  -H:DumpHeap=...                              Dump the heap at a specific time during image building.The option accepts a list of comma separated phases, any of:
                                               after-analysis, before-compilation. Default: None
  -H:DumpLLVMStackMap=...                      Dump contents of the generated stackmap to the specified file. Default: None
  -H:?DumpOnError                              Send compiler IR to dump handlers on error. Default: - (disabled).
  -H:DumpOnPhaseChange=...                     Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the
                                               simple name of the phase class. Default: None
  -H:DumpPath="graal_dumps"                    The directory where various Graal dump files are written.
  -H:?DumpTargetInfo                           Show native-toolchain information and image-build settings. Default: - (disabled).
  -H:?DumpThreadStacksOnSignal                 Dumps all thread stacktraces on SIGQUIT/SIGBREAK. Default: - (disabled).
  -H:?DumpingErrorsAreFatal                    Treat any exceptions during dumping as fatal. Default: - (disabled).
  -H:?DuplicateIrreducibleLoops                When enabled, some limited amount of duplication will be performed in order compile code containing irreducible loops.
                                               Default: + (enabled).
  -H:?DynamicCountersPrintGroupSeparator       Use grouping separators for number printing. Default: + (enabled).
  -H:DynamicProxyConfigurationFiles=...        One or several (comma-separated) paths to JSON files that specify lists of interfaces that define Java proxy classes.
                                               Default: None [Extra help available]
  -H:DynamicProxyConfigurationResources=...    Resources describing program elements to be made available for reflection (see ProxyConfigurationFiles). Default: None
  -H:?DynamicProxyTracing                      Enable trace logging for dynamic proxy. Default: - (disabled).
  -H:?EagerSnippets                            Eagerly construct extra snippet info. Default: - (disabled).
  -H:?EmitStringEncodingSubstitutions          Emit substitutions for UTF16 and latin1 compression. Default: + (enabled).
  -H:?EnableAllSecurityServices                Add all security service classes to the generated image. Default: - (disabled).
  -H:?EnableLoggingFeature                     Enable the feature that provides support for logging. Default: + (enabled).
  -H:?EnableSecurityServicesFeature            Enable the feature that provides support for security services. Default: + (enabled).
  -H:EnableURLProtocols=...                    List of comma separated URL protocols to enable. Default: None
  -H:?EnforceMaxRuntimeCompileMethods          Enforce checking of maximum number of methods allowed for runtime compilation. Useful for checking in the gate that the
                                               number of methods does not go up without a good reason. Default: - (disabled).
  -H:EntryPointNamePrefix=""                   Prefix that is added to the names of entry point methods.
  -H:EscapeAnalysisIterations=2                
  -H:EscapeAnalysisLoopCutoff=20               
  -H:EscapeAnalyzeOnly=...                     Default: None
  -H:ExactFullUnrollMaxNodes=800               
  -H:ExactPartialUnrollMaxNodes=200            
  -H:ExcludeResources=...                      Regexp to match names of resources to be excluded from the image. Default: None
  -H:?ExhaustiveHeapScan                       Scan all objects reachable from roots for analysis. By default false. Default: - (disabled).
  -H:?ExitAfterAnalysis                        Exit after analysis. Default: - (disabled).
  -H:?ExitAfterCAPCache                        Exit image generation after C Annotation Processor Cache creation. Default: - (disabled).
  -H:?ExitAfterQueryCodeGeneration             Output query code for target platform without executing it. Default: - (disabled).
  -H:?ExitAfterRelocatableImageWrite           Exit after writing relocatable file. Default: - (disabled).
  -H:?ExitVMOnException                        Alias for CompilationFailureAction=ExitVM. Default: - (disabled).
  -H:?ExtendedAsserts                          Enable extended asserts which slow down analysis. Default: - (disabled).
  -H:?FailedLoopExplosionIsFatal               Do not bail out but throw an exception on failed loop explosion. Default: - (disabled).
  -H:FallbackExecutorClasspath=...             Internal option used to specify Classpath for FallbackExecutor. Default: None
  -H:FallbackExecutorJavaArg=...               Internal option used to specify java arguments for FallbackExecutor. Default: None
  -H:FallbackExecutorMainClass=...             Internal option used to specify MainClass for FallbackExecutor. Default: None
  -H:FallbackExecutorSystemProperty=...        Internal option used to specify system properties for FallbackExecutor. Default: None
  -H:FallbackThreshold=5                       Define when fallback-image generation should be used.
  -H:Features=...                              A comma-separated list of fully qualified Feature implementation classes. Default: None
  -H:?FoldSecurityManagerGetter                Fold SecurityManager getter. Default: + (enabled).
  -H:?ForceNoROSectionRelocations              Use only a writable native image heap (requires ld.gold linker). Default: - (disabled).
  -H:?FullUnroll                               Default: + (enabled).
  -H:FullUnrollConstantCompareBoost=15         
  -H:FullUnrollMaxApplication=60               
  -H:FullUnrollMaxIterations=600               
  -H:FullUnrollMaxNodes=400                    
  -H:GCDebugStartCycle=-1                      Start tracing compiled GC barriers after N garbage collections (disabled if N <= 0).
  -H:?GatherSafepointStatistics                Gather statistics about each safepoint. Default: - (disabled).
  -H:?GenLoopSafepoints                        Default: + (enabled).
  -H:GenerateDebugInfo=0                       Insert debug info into the generated native image or library.
  -H:?GeneratePIC                              Generate position independent code. Default: - (disabled).
  -H:?GenericDynamicCounters                   Turn on the benchmark counters, and displays the results on VM shutdown. Default: - (disabled).
  -H:?GraalArithmeticStubs                     Use Graal arithmetic stubs instead of HotSpot stubs where possible. Default: + (enabled).
  -H:GraalCompileOnly=...                      A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is
                                               redirected to a lower tier compiler. The filter format is the same as for the MethodFilter option. Default: None
  -H:GraphCompressionThreshold=70              Graal graph compression is performed when percent of live nodes falls below this value.
  -H:?GreyToBlackObjRefDemographics            Develop demographics of the object references visited. Default: - (disabled).
  -H:GreyToBlackObjectVisitorDiagnosticHistory=0
                                               Length of GreyToBlackObjectVisitor history for diagnostics. 0 implies no history is kept.
  -H:?GuardPriorities                          Default: + (enabled).
  -H:HeapChunkHeaderPadding=0                  Number of bytes at the beginning of each heap chunk that are not used for payload data, i.e., can be freely used as
                                               metadata by the heap chunk provider.
  -H:?HotSpotDeoptExplicitExceptions           Testing only option that forces deopts for exception throws. Default: - (disabled).
  -H:?HotSpotPostOnExceptions                  Testing only option that forces deopts for exception throws. Default: - (disabled).
  -H:?HotSpotPrintInlining                     Print inlining optimizations. Default: - (disabled).
  -H:?HybridStaticContext                      Enable hybrid context for static methods, i.e. uses invocation site as context for static methods. Default: -
                                               (disabled).
  -H:?ImageHeapCardMarking                     Enables card marking for image heap objects, which arranges them in chunks. Automatically enabled when supported. 
  -H:ImageObjectTreeExpandRoots=""             Override the default suppression of specified roots. See: Reports.md.
  -H:ImageObjectTreeExpandTypes=""             Override the default suppression of specified types. See: Reports.md.
  -H:ImageObjectTreeSuppressRoots=""           Suppress the expansion of specified roots. See: Reports.md.
  -H:ImageObjectTreeSuppressTypes=""           Suppress the expansion of specified types. See: Reports.md.
  -H:ImageSymbolsPrefix=""                     Common prefix used by method symbols in image.
  -H:?ImmutableCode                            Try to avoid emitting code where patching is required. Default: - (disabled).
  -H:?IncludeAllTimeZones                      When true, all time zones will be pre-initialized in the image. Default: - (disabled).
  -H:IncludeLLVMDebugInfo=0                    Include debugging info in the generated image (for LLVM backend).
  -H:?IncludeNodeSourcePositions               Track NodeSourcePositions during runtime-compilation. Default: - (disabled).
  -H:IncludeResourceBundles=...                Comma separated list of bundles to be included into the image. Default: None
  -H:IncludeResources=...                      Regexp to match names of resources to be included in the image. Default: None
  -H:IncludeTimeZones=""                       The time zones, in addition to the default zone of the host, that will be pre-initialized in the image.
  -H:InitialCollectionPolicy="com.oracle.svm.core.genscavenge.CollectionPolicy$ByTime"
                                               The initial garbage collection policy, as a fully-qualified class name (might require quotes or escaping).
  -H:?Inline                                   Enable inlining. Default: + (enabled).
  -H:?InlineDuringParsing                      Inlines trivial methods during bytecode parsing. Default: + (enabled).
  -H:InlineDuringParsingMaxDepth=10            Maximum depth when inlining during bytecode parsing.
  -H:?InlineEverything                         Default: - (disabled).
  -H:?InlineIntrinsicsDuringParsing            Inlines intrinsic methods during bytecode parsing. Default: + (enabled).
  -H:?InlineMegamorphicCalls                   Inline calls with megamorphic type profile (i.e., not all types could be recorded). Default: + (enabled).
  -H:?InlineMonomorphicCalls                   Inline calls with monomorphic type profile. Default: + (enabled).
  -H:?InlinePartialIntrinsicExitDuringParsing  Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an
                                               intrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not
                                               support. Default: + (enabled).
  -H:?InlinePolymorphicCalls                   Inline calls with polymorphic type profile. Default: + (enabled).
  -H:?InlineVTableStubs                        Default: + (enabled).
  -H:InliningDepthError=1000                   Maximum inlining depth during partial evaluation before reporting an infinite recursion.
  -H:InspectServerContentPath="inspect"        Path to the contents of the Inspect web server.
  -H:?InstallExitHandlers                      Provide java.lang.Terminator exit handlers for executable images. Default: - (disabled).
  -H:?InterceptBailout                         Intercept also bailout exceptions. Default: - (disabled).
  -H:?Intrinsify                               Use compiler intrinsifications. Default: + (enabled).
  -H:?JNI                                      Enable Java Native Interface (JNI) support. Default: + (enabled).
  -H:JNIConfigurationFiles=...                 Files describing program elements to be made accessible via JNI (for syntax, see ReflectionConfigurationFiles). Default:
                                               None
  -H:JNIConfigurationResources=...             Resources describing program elements to be made accessible via JNI (see JNIConfigurationFiles). Default: None
  -H:?JNIExportSymbols                         Export Invocation API symbols. Default: + (enabled).
  -H:?JNIVerboseLookupErrors                   Report information about known JNI elements when lookup fails. Default: - (disabled).
  -H:?LIRDynMoveProfileMethod                  Enable dynamic move profiling per method. Default: - (disabled).
  -H:?LIROptConstantLoadOptimization           Enable constant load optimization. 
  -H:?LIROptControlFlowOptimizer               
  -H:?LIROptEdgeMoveOptimizer                  
  -H:?LIROptLSRAEliminateSpillMoves            Enable spill move elimination. 
  -H:?LIROptLSRAOptimizeSpillPosition          Enable spill position optimization. 
  -H:?LIROptLSStackSlotAllocator               Use linear scan stack slot allocation. 
  -H:?LIROptNullCheckOptimizer                 
  -H:?LIROptRedundantMoveElimination           
  -H:?LIROptStackMoveOptimizer                 
  -H:?LIROptimization                          Enable LIR level optimiztations. Default: + (enabled).
  -H:?LIRProfileMethods                        Enables profiling of methods. Default: - (disabled).
  -H:?LIRProfileMoves                          Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads
                                               (constant to register) or copies (register to register). Default: - (disabled).
  -H:LLVMMaxFunctionsPerBatch=1000             Maximum size of batches used for LLVM compilation. 0 means a single batch, 1 means all functions separately.
  -H:?LSRAOptSplitOnly                         LSRA optimization: Only split but do not reassign. Default: - (disabled).
  -H:?LSRAOptimization                         Enable LSRA optimization. Default: - (disabled).
  -H:LargeArrayThreshold=0                     The size at or above which an array will be allocated in its own unaligned chunk.  0 implies (AlignedHeapChunkSize / 8).
  -H:LimitInlinedInvokes=5.0                   
  -H:?LimitObjectArrayLength                   Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for
                                               that type. The analysis must be heap sensitive. Default: - (disabled).
  -H:LinkerRPath=...                           Path passed to the linker as the -rpath (list of comma-separated directories). Default: None
  -H:?ListMetrics                              Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note
                                               that this only lists the metrics that were initialized during the VM execution and so will not include metrics for
                                               compiler code that is not executed. Default: - (disabled).
  -H:?LoadExceptionObjectInVM                  Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception
                                               handler. Default: - (disabled).
  -H:Log=...                                   Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax. Default: None
  -H:LogFile=...                               File to which logging is sent.  A %p in the name will be replaced with a string identifying the process, usually the
                                               process id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will
                                               be replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate
                                               id>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err.
                                               Default: None
  -H:?LogVerbose                               Enable more verbose log output when available. Default: - (disabled).
  -H:LoopHeaderAlignment=16                    Alignment in bytes for loop header blocks.
  -H:LoopMaxUnswitch=3                         
  -H:?LoopPeeling                              Default: + (enabled).
  -H:?LoopPredication                          Default: + (enabled).
  -H:?LoopPredicationMainPath                  Default: + (enabled).
  -H:?LoopUnswitch                             Default: + (enabled).
  -H:LoopUnswitchFrequencyBoost=10.0           
  -H:LoopUnswitchMaxIncrease=500               
  -H:LoopUnswitchTrivial=10                    
  -H:?MatchExpressions                         Allow backend to match complex expressions. Default: + (enabled).
  -H:MaxCallingContextDepth=0                  The maximum length of the methods context chains.
  -H:MaxCallingContextWidth=0                  The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context
                                               depth are different.
  -H:MaxCompilationProblemsPerAction=2         The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before
                                               changing to a less verbose action. This does not apply to the ExitVM action.
  -H:MaxConstantObjectsPerType=100             The maximum number of constant objects recorded for each type before merging the constants into one unique constant
                                               object per type. The analysis must be heap sensitive. It has a minimum value of 1.
  -H:MaxDuplicationFactor=2.0                  How much duplication can happen because of irreducible loops before bailing out.
  -H:MaxHeapContextDepth=0                     The maximum length of the context used to model a heap object in addition to the allocation site; used only when
                                               ContextSensitiveHeap is enabled.
  -H:MaxHeapContextWidth=0                     The maximum number of contexts to record for a heap object.  It only affects the analysis when the max and min calling
                                               context depth are different.
  -H:MaxInvokesInTrivialMethod=1               Maximum number of invokes in a method so that it is considered trivial (for testing only).
  -H:MaxNodesInTrivialLeafMethod=40            Maximum number of nodes in a method so that it is considered trivial, if it does not have any invokes.
  -H:MaxNodesInTrivialMethod=20                Maximum number of nodes in a method so that it is considered trivial.
  -H:MaxObjectSetSize=100                      The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type.
                                               The analysis must be heap sensitive. It has a minimum value of 1.
  -H:MaxReachableTypes=-1                      Maximum number of types allowed in the image. Used for tests where small number of types in necessary.
  -H:MaxRuntimeCompileMethods=...              Maximum number of methods allowed for runtime compilation. Default: None
  -H:MaxSurvivorSpaces=0                       Maximum number of survivor spaces.
  -H:MaxTemplatesPerSnippet=50                 
  -H:MaxUnrolledObjectZeroingStores=8          Define the maximum number of stores for which the loop that zeroes out objects is unrolled.
  -H:MaximumDesiredSize=20000                  Maximum desired size of the compiler graph in nodes.
  -H:MaximumEscapeAnalysisArrayLength=128      The maximum length of an array that will be escape analyzed.
  -H:MaximumInliningSize=300                   Inlining is explored up to this number of nodes in the graph for each call site.
  -H:MaximumLoopExplosionCount=10000           Max number of loop explosions per method.
  -H:MaximumRecursiveInlining=5                Maximum level of recursive inlining.
  -H:MegamorphicInliningMinMethodProbability=0.33
                                               Minimum probability for methods to be inlined for megamorphic type profiles.
  -H:MemUseTrackers=...                        Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An
                                               empty value enables all memory usage trackers unconditionally. Default: None
  -H:Method="main"                             Name of the main entry point method. Optional if --shared is used.
  -H:MethodFilter=...                          Pattern for matching methods. The syntax for a pattern is:. Default: None [Extra help available]
  -H:?MethodFilterRootOnly                     Only check MethodFilter against the root method in the context if true, otherwise check all methods. Default: -
                                               (disabled).
  -H:MethodInlineBailoutLimit=5000             Per-compilation method inlining exploration limit before giving up (use 0 to disable).
  -H:MetricsFile=...                           File to which metrics are dumped per compilation. Default: None [Extra help available]
  -H:MinCallingContextDepth=0                  The minimum length of the methods context chains.
  -H:MinHeapContextDepth=0                     The minimum length of the context used to model a heap object in addition to the allocation site; used only when
                                               ContextSensitiveHeap is enabled.
  -H:MinimalBulkZeroingSize=2048               If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold.
  -H:MinimumPeelFrequency=0.35                 
  -H:?MultiThreaded                            Enable support for threads and and thread-local variables (disable for single-threaded implementation). Default: +
                                               (enabled).
  -H:?MustNotSynchronizeWarningsAreFatal       Warnings for @MustNotSynchronize annotations are fatal. Default: + (enabled).
  -H:NDCV=0                                    Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose, 3 = fatal).
  -H:Name=""                                   Name of the output file to be generated.
  -H:?NativeArchitecture                       Overrides CPUFeatures and uses the native architecture, i.e., the architecture of a machine that builds an image.
                                               NativeArchitecture takes precedence over CPUFeatures. Default: - (disabled).
  -H:NativeLinkerOption=...                    Pass the provided raw option that will be appended to the linker command to produce the final binary. The possible
                                               options are platform specific and passed through without any validation. Default: None
  -H:NeverInline=...                           Pattern for disabling inlining of methods during image generation. Default: None [Extra help available]
  -H:?NewCAPCache                              Create a C Annotation Processor Cache. Will erase any previous cache at that same location. Default: - (disabled).
  -H:?NodeCounters                             Counts the number of instances of each node class. Default: - (disabled).
  -H:NonFatalIdenticalCompilationSnapshots=20  Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck
                                               compilation.
  -H:NumberOfAnalysisThreads=-1                The number of threads to use for analysis during native image generation. The number must be smaller than the
                                               NumberOfThreads.
  -H:NumberOfThreads=2                         The maximum number of threads to use concurrently during native image generation.
  -H:ObjdumpExecutables=...                    Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled.
                                               Otherwise, the first existing executable in the list is used. Default: None
  -H:?OmitHotExceptionStacktrace               Default: - (disabled).
  -H:?OptAssumptions                           Default: + (enabled).
  -H:?OptConvertDeoptsToGuards                 Default: + (enabled).
  -H:?OptDeoptimizationGrouping                Default: + (enabled).
  -H:?OptDevirtualizeInvokesOptimistically     Default: + (enabled).
  -H:?OptEarlyReadElimination                  Default: + (enabled).
  -H:?OptEliminateGuards                       Default: + (enabled).
  -H:?OptFloatingReads                         Default: + (enabled).
  -H:?OptImplicitNullChecks                    Default: + (enabled).
  -H:?OptReadElimination                       Default: + (enabled).
  -H:?OptScheduleOutOfLoops                    Default: + (enabled).
  -H:Optimize=2                                Control native-image code optimizations: 0 - no optimizations, 1 - basic optimizations, 2 - aggressive optimizations.
  -H:PageSize=0                                Define PageSize of a machine that runs the image. The default = 0 (== same as host machine page size).
  -H:?ParseRuntimeOptions                      Parse and consume standard options and system properties from the command line arguments when the VM is created.
                                               Default: + (enabled).
  -H:?PartialEscapeAnalysis                    Default: + (enabled).
  -H:?PartialUnroll                            Default: + (enabled).
  -H:Path=...                                  Directory of the image file to be generated. Default: None
  -H:?PeelALot                                 Default: - (disabled).
  -H:?PreserveFramePointer                     Saves stack base pointer on the stack on method entry. Default: - (disabled).
  -H:?PrintAOTCompilation                      Print logging information during compilation. Default: - (disabled).
  -H:?PrintAnalysisCallTree                    Print analysis call tree, a breadth-first tree reduction of the call graph. Default: - (disabled).
  -H:?PrintAnalysisStatistics                  Print analysis results statistics. Default: - (disabled).
  -H:?PrintBackendCFG                          Enable dumping LIR, register allocation and code generation info to the C1Visualizer. Default: - (disabled).
  -H:?PrintBlockMapping                        Enable dumping CFG built during initial BciBlockMapping. Default: - (disabled).
  -H:?PrintCFG                                 Enable dumping to the C1Visualizer. Enabling this option implies PrintBackendCFG. Default: - (disabled).
  -H:PrintCanonicalGraphStringFlavor=0         Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes
                                               involving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small
                                               structure differences).
  -H:?PrintCanonicalGraphStrings               Enable dumping canonical text from for graphs. Default: - (disabled).
  -H:?PrintClassInitialization                 Prints class initialization info for all classes detected by analysis. Default: - (disabled).
  -H:?PrintCompilation                         Print an informational line to the console for each completed compilation. Default: - (disabled).
  -H:?PrintFeatures                            Print features-specific information. Default: - (disabled).
  -H:PrintFlags=...                            Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug). Default: None
  -H:PrintFlagsWithExtraHelp=...               Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra
                                               help. Default: None
  -H:PrintGraph=File                           Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written. [Extra help available]
  -H:?PrintGraphFile                           Setting to true sets PrintGraph=file, setting to false sets PrintGraph=network. Default: + (enabled).
  -H:PrintGraphHost="127.0.0.1"                Host part of the address to which graphs are dumped.
  -H:PrintGraphPort=4445                       Port part of the address to which graphs are dumped in binary format.
  -H:?PrintGraphWithSchedule                   Schedule graphs as they are dumped. Default: - (disabled).
  -H:?PrintHeapHistogram                       Print class statistics of native image heap. Default: - (disabled).
  -H:?PrintIRWithLIR                           Print HIR along side LIR as the latter is generated. Default: - (disabled).
  -H:?PrintImageElementSizes                   Print the sizes of the elements of the built image. Default: - (disabled).
  -H:?PrintImageHeapPartitionSizes             Print the sizes of the native image heap as the image is built. Default: - (disabled).
  -H:?PrintImageObjectTree                     Print boot image object hierarchy. Default: - (disabled).
  -H:?PrintJNIMethods                          Print JNI methods added to generated image. Default: - (disabled).
  -H:?PrintLIRWithAssembly                     Include the LIR as comments with the final assembly. Default: - (disabled).
  -H:?PrintMethodHistogram                     Print statistics of methods in native image heap. Default: - (disabled).
  -H:?PrintMustNotSynchronizePath              Print path for @MustNotSynchronize warnings. Default: + (enabled).
  -H:?PrintMustNotSynchronizeWarnings          Print warnings for @MustNotSynchronize annotations. Default: + (enabled).
  -H:?PrintPointsToStatistics                  Report analysis statistics. Default: - (disabled).
  -H:?PrintProfilingInformation                Print profiling information when parsing a method's bytecode. Default: - (disabled).
  -H:?PrintRestrictHeapAccessPath              Print path for @RestrictHeapAccess warnings. Default: + (enabled).
  -H:?PrintRestrictHeapAccessWarnings          Print warnings for @RestrictHeapAccess annotations. Default: + (enabled).
  -H:?PrintRuntimeCompileMethods               Print call tree of methods available for runtime compilation. Default: - (disabled).
  -H:?PrintStaticTruffleBoundaries             Print truffle boundaries found during the analysis. Default: - (disabled).
  -H:?PrintSynchronizedAnalysis                Print types used for Java synchronization. Default: - (disabled).
  -H:?PrintUninterruptibleCalleeDOTGraph       Print (to stderr) a DOT graph of the @Uninterruptible annotations. Default: - (disabled).
  -H:?PrintUniverse                            Print information about classes, methods, and fields that are present in the native image. Default: - (disabled).
  -H:?ProbabilisticProfiling                   Control probabilistic profiling on AMD64. Default: + (enabled).
  -H:?ProfileAllocations                       Enable profiling of allocation sites. Default: - (disabled).
  -H:ProfileAllocationsContext=AllocatingMethod
                                               Control the naming and granularity of the counters when using ProfileAllocations. [Extra help available]
  -H:?ProfileAnalysisOperations                Track the progress of the static analysis. Default: - (disabled).
  -H:?ProfileBackedges                         Emit profiling of backedges. Default: + (enabled).
  -H:?ProfileCompiledMethods                   Default: - (disabled).
  -H:?ProfileConstantObjects                   Track the creation of constant objects. Default: - (disabled).
  -H:?ProfileDeoptimization                    Print logging information during object file writing. Default: - (disabled).
  -H:?ProfileInvokes                           Emit profiling of invokes. Default: + (enabled).
  -H:?ProfileMonitors                          Enable profiling of monitor operations. Default: - (disabled).
  -H:?ProfileSimpleMethods                     Profile simple methods. Default: + (enabled).
  -H:QueryCodeDir=""                           Directory where query code for target platform should be output.
  -H:?RawConditionalElimination                Default: + (enabled).
  -H:ReadEliminationMaxLoopVisits=5            
  -H:?ReassociateExpressions                   Re-associate loop invariants and constants. Default: + (enabled).
  -H:?ReduceDCE                                Disable optional dead code eliminations. Default: + (enabled).
  -H:ReflectionConfigurationFiles=...          One or several (comma-separated) paths to JSON files that specify which program elements should be made available via
                                               reflection. Default: None [Extra help available]
  -H:ReflectionConfigurationResources=...      Resources describing program elements to be made available for reflection (see ReflectionConfigurationFiles). Default:
                                               None
  -H:?ReflectionPluginTracing                  Enable trace logging for reflection plugins. Default: - (disabled).
  -H:RegisterPressure=...                      Comma separated list of registers that register allocation is limited to. Default: None
  -H:?RelaxTypeFlowStateConstraints            Allow a type flow state to contain types not compatible with its declared type. Default: + (enabled).
  -H:?RemoveNeverExecutedCode                  Default: + (enabled).
  -H:?RemoveSaturatedTypeFlows                 Enable the type flow saturation analysis performance optimization. Default: + (enabled).
  -H:?RemoveUnusedSymbols                      Use linker option to prevent unreferenced symbols in image. Default: - (disabled).
  -H:?ReplaceInputsWithConstantsBasedOnStamps  Default: + (enabled).
  -H:ReportAnalysisForbiddenType=...           Report error if <typename>[:<UsageKind>{,<UsageKind>}] is discovered during analysis (valid values for UsageKind:
                                               InHeap, Allocated, Reachable). Default: None
  -H:?ReportExceptionStackTraces               Show exception stack traces for exceptions during image building.). Default: - (disabled).
  -H:?ReportUnsafeOffsetWarnings               Print unsafe operation offset warnings.). Default: - (disabled).
  -H:?ReportUnsupportedElementsAtRuntime       Report usage of unsupported methods and fields at run time when they are accessed the first time, instead of as an error
                                               during image building. Default: - (disabled).
  -H:ResourceConfigurationFiles=...            Files describing Java resources to be included in the image. Default: None
  -H:ResourceConfigurationResources=...        Resources describing Java resources to be included in the image. Default: None
  -H:?ReturnAfterAnalysis                      Return after analysis. Default: - (disabled).
  -H:?ReturnSpecialRegs                        Return special registers from functions in LLVM bitcode. This may decrease performance if the target doesn't support
                                               returning multiple values from a function. Default: + (enabled).
  -H:RuntimeAssertions=...                     Enable or disable Java assert statements at run time. Default: None
  -H:?RuntimeSystemAssertions                  Enable or disable Java system assertions at run time. Default: - (disabled).
  -H:?ScanObjectsParallel                      Object scanning in parallel. Default: + (enabled).
  -H:ServiceLoaderFeatureExcludeServiceProviders=...
                                               Comma-separated list of service providers that should be excluded. Default: None
  -H:ServiceLoaderFeatureExcludeServices=...   Comma-separated list of services that should be excluded. Default: None
  -H:?SharedLibrary                            Build shared library. Default: - (disabled).
  -H:ShowConfiguration=none                    Writes to the VM log information about the compiler configuration selected.
  -H:?ShowDumpFiles                            Print the name of each dump file path as it's created. Default: - (disabled).
  -H:?ShowSubstitutionSourceInfo               Controls whether the source position information of snippets and method substitutions are exposed to HotSpot.  Can be
                                               useful when profiling to get more precise position information. Default: - (disabled).
  -H:?SimpleFastInflatedLocking                Handle simple cases for inflated monitors in the fast-path. Default: + (enabled).
  -H:SimpleMethodCalls=1                       Maximum number of calls in a simple method.
  -H:SimpleMethodGraphSize=256                 Maximum number of nodes in a graph for a simple method.
  -H:SimpleMethodIndirectCalls=0               Maximum number of indirect calls in a simple moethod.
  -H:SmallCompiledLowLevelGraphSize=330        If the previous low-level graph size of the method exceeds the threshold, it is not inlined.
  -H:?SnippetCounters                          Enable counters for various paths in snippets. Default: - (disabled).
  -H:SoftRefLRUPolicyMSPerMB=1000              Soft references: this number of milliseconds multiplied by the free heap memory in MByte is the time span for which a
                                               soft reference will keep its referent alive after its last access.
  -H:?SpawnIsolates                            Support multiple isolates. 
  -H:SpectrePHTBarriers=None                   Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1). [Extra help available]
  -H:?SpectrePHTIndexMasking                   Mask indices to scope access to allocation size after bounds check. Default: - (disabled).
  -H:StackRedZoneSize=8192                     Size (in bytes) of the red zone reserved at the end of the stack. This stack space can only be used by critical VM code
                                               and C code, e.g., to report fatal errors.
  -H:?StackTrace                               Provide method names for stack traces. Default: + (enabled).
  -H:StackYellowZoneSize=32768                 Size (in bytes) of the yellow zone reserved at the end of the stack. This stack space is reserved for VM use and cannot
                                               be used by the application.
  -H:?StaticExecutable                         Build statically linked executable (requires static libc and zlib). Default: - (disabled).
  -H:?StaticExecutableWithDynamicLibC          Builds a statically linked executable with libc dynamically linked. Default: - (disabled).
  -H:?StressExplicitExceptionCode              Stress the code emitting explicit exception throwing code. Default: - (disabled).
  -H:?StressInvokeWithExceptionNode            Stress the code emitting invokes with explicit exception edges. Default: - (disabled).
  -H:?StressTestEarlyReads                     Stress the code by emitting reads at earliest instead of latest point. Default: - (disabled).
  -H:?StrictConfiguration                      Causes unknown attributes in configuration objects to abort the image build instead of emitting a warning. Default: -
                                               (disabled).
  -H:?StrictQueryCodeCompilation               Use strict checks when performing query code compilation. Default: + (enabled).
  -H:StringIndexOfLimit=4096                   String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is lower than
                                               this value.
  -H:SubstitutionFiles=...                     Comma-separated list of file names with declarative substitutions. Default: None
  -H:SubstitutionResources=...                 Comma-separated list of resource file names with declarative substitutions. Default: None
  -H:?SupportCompileInIsolates                 Support runtime compilation in separate isolates (enable at runtime with option CompileInIsolates). 
  -H:?SupportJsrBytecodes                      Default: + (enabled).
  -H:?SupportOSRWithLocks                      Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits
                                               mappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in
                                               the graph. Default: + (enabled).
  -H:?SupportRecurringCallback                 Support a per-thread timer that is called at a specific interval. Default: + (enabled).
  -H:?SuppressStderr                           Suppress console error output for unittests. Default: - (disabled).
  -H:?SuppressStdout                           Suppress console normal output for unittests. Default: - (disabled).
  -H:TempDirectory=""                          Directory for temporary files generated during native image generation. If this option is specified, the temporary files
                                               are not deleted so that you can inspect them after native image generation.
  -H:TestFile=""                               
  -H:?ThrowUnsafeOffsetErrors                  Throw unsafe operation offset errors.). Default: + (enabled).
  -H:TierABackedgeNotifyFreqLog=16             Backedge notification frequency.
  -H:TierABackedgeProfileProbabilityLog=12     Backedge profile probability.
  -H:TierAInvokeInlineeNotifyFreqLog=-1        Inlinee invocation notification frequency (-1 means count, but do not notify).
  -H:TierAInvokeNotifyFreqLog=13               Invocation notification frequency.
  -H:TierAInvokeProfileProbabilityLog=8        Invocation profile probability.
  -H:?TieredAOT                                Do profiling and callbacks to tiered runtime. Default: - (disabled).
  -H:Time=...                                  Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value
                                               enables all timers unconditionally. Default: None
  -H:TimedDynamicCounters=-1                   Turn on the benchmark counters, and displays the results every n milliseconds.
  -H:Timers=...                                Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all
                                               timers unconditionally. Default: None
  -H:TraceBytecodeParserLevel=0                The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame
                                               state trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be
                                               interleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used
                                               to refine tracing to selected methods.
  -H:TraceClassInitialization=""               Comma-separated list of fully-qualified class names that class initialization is traced for.
  -H:?TraceEscapeAnalysis                      Default: - (disabled).
  -H:?TraceExceptionHandlerStub                Trace execution of stub used to handle an exception thrown by a callee. Default: - (disabled).
  -H:?TraceHeapVerification                    Trace heap verification. Default: - (disabled).
  -H:?TraceInlineDuringParsing                 Traces inlining performed during bytecode parsing. Default: - (disabled).
  -H:?TraceInlining                            Enable tracing of inlining decisions. Default: - (disabled). [Extra help available]
  -H:?TraceInliningForStubsAndSnippets         Enable inlining decision tracing in stubs and snippets. Default: - (disabled).
  -H:TraceLIRGeneratorLevel=0                  The trace level for the LIR generator.
  -H:?TraceLoggingFeature                      When enabled, logging feature details are printed. Default: - (disabled).
  -H:TraceMonitorsMethodFilter=...             Trace monitor operations in methods whose fully qualified name contains this substring. Default: None
  -H:TraceMonitorsTypeFilter=...               Trace monitor operations on objects whose type contains this substring. Default: None
  -H:?TraceNativeToolUsage                     Trace all native tool invocations as part of image building. Default: - (disabled).
  -H:TraceObjectInstantiation=""               Comma-separated list of fully-qualified class names that object instantiation is traced for.
  -H:?TraceObjectPromotion                     Trace each object promotion (generates significant amounts of output). Default: - (disabled).
  -H:?TraceParserPlugins                       Traces use of plugins during bytecode parsing. Default: - (disabled).
  -H:?TraceSecurityServices                    Enable trace logging for the security services feature. Default: - (disabled).
  -H:?TraceServiceLoaderFeature                When enabled, each service loader resource and class will be printed out to standard output. Default: - (disabled).
  -H:?TraceStackVerification                   Trace stack verification. Default: - (disabled).
  -H:?TraceUnwindStub                          Trace execution of the stub that routes an exception to a handler in the calling frame. Default: - (disabled).
  -H:?TraceVMOperations                        Trace VMOperation execution. Default: - (disabled).
  -H:?TrackAccessChain                         Track the callers for methods and accessing methods for fields. Default: - (disabled).
  -H:?TrackInputFlows                          Track the input for type flows. Default: - (disabled).
  -H:TrackMemUse=...                           Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An
                                               empty value enables all memory use trackers unconditionally. Default: None
  -H:?TrackNodeInsertion                       Track source stack trace where a node was inserted into the graph. Default: - (disabled).
  -H:?TrackNodeSourcePosition                  Track the NodeSourcePosition. Default: - (disabled).
  -H:?TreatRuntimeCodeInfoReferencesAsWeak     Determines if references from runtime-compiled code to Java heap objects should be treated as strong or weak. Default: +
                                               (enabled).
  -H:TrivialInliningSize=10                    Graphs with less than this number of nodes are trivial and therefore always inlined.
  -H:?TruffleCheckBlackListedMethods           Fail if a method known as not suitable for partial evaluation is reachable for runtime compilation. Default: -
                                               (disabled).
  -H:?TruffleCheckFrameImplementation          Enforce that the Truffle runtime provides the only implementation of Frame. Default: + (enabled).
  -H:?TruffleCheckNeverPartOfCompilation       Check that CompilerAsserts.neverPartOfCompilation is not reachable for runtime compilation. Default: + (enabled).
  -H:TruffleCompilerConfiguration=...          Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration). Default:
                                               None
  -H:?TruffleInlineDuringParsing               Inline trivial methods in Truffle graphs during native image generation. Default: + (enabled).
  -H:?TruffleMultiThreaded                     Enable support for Truffle background compilation. Default: + (enabled).
  -H:?TrufflePropagateCompilationErrors        Propagate Truffle compilation errors. Default: - (disabled).
  -H:?TrustFinalDefaultFields                  Determines whether to treat final fields with default values as constant. Default: + (enabled).
  -H:TypeCheckMaxHints=2                       The maximum number of profiled types that will be used when compiling a profiled type check. Note that
                                               TypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks.
  -H:TypeCheckMinProfileHitProbability=0.5     If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the
                                               type check will be compiled without profiling info.
  -H:TypeFlowSaturationCutoff=20               The maximum number of types recorded in a type flow. -1 indicates no limitation.
  -H:?UnresolvedIsError                        Report unresolved elements as errors. Default: + (enabled).
  -H:UnrollMaxIterations=16                    
  -H:UnsafeAutomaticSubstitutionsLogLevel=1    Unsafe automatic substitutions logging level: Disabled=0, Basic=1, Info=2, Debug=3.).
  -H:?UnsafeOffsetWarningsAreFatal             Print unsafe operation offset warnings.). Default: - (disabled).
  -H:?UseBranchesWithin32ByteBoundary          Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See
                                               https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for
                                               more details. If not set explicitly, the default value will be determined according to the CPU model. Default: -
                                               (disabled).
  -H:?UseCAPCache                              Indicate the C Annotation Processor to use previously cached native information when generating C Type information.
                                               Default: - (disabled).
  -H:?UseCalleeSavedRegisters                  Use callee saved registers to reduce spilling for low-frequency calls to stubs (if callee saved registers are supported
                                               by the architecture). Default: + (enabled).
  -H:?UseCardRememberedSetHeap                 Use a card remembered set heap for GC. Default: + (enabled).
  -H:?UseCompilationStatistics                 Enables CompilationStatistics. Default: - (disabled).
  -H:?UseContainerSupport                      Enable detection and runtime container configuration support. Default: + (enabled).
  -H:?UseDedicatedVMOperationThread            Determines if VM operations should be executed in a dedicated thread. Default: - (disabled).
  -H:?UseEncodedGraphs                         Encode and decode snippets and substitutions before parsing to test libgraal code path. This option is ignored in the
                                               context of libgraal. Default: - (disabled).
  -H:?UseExceptionProbability                  Default: + (enabled).
  -H:?UseGraalStubs                            Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code. Default: +
                                               (enabled).
  -H:?UseLegacyTypeCheck                       Revert to using previous native-image type check. Default: - (disabled).
  -H:UseLibC="glibc"                           Selects the libc implementation to use. Available implementations: glibc, musl.
  -H:?UseLoopLimitChecks                       Default: + (enabled).
  -H:?UseReferenceHandlerThread                Populate reference queues in a separate thread rather than after a garbage collection. Default: - (disabled).
  -H:?UseServiceLoaderFeature                  Automatically register services for run-time lookup using ServiceLoader. Default: + (enabled).
  -H:?UseSnippetGraphCache                     Use a cache for snippet graphs. Default: + (enabled).
  -H:?UseSnippetTemplateCache                  Use a LRU cache for snippet templates. Default: + (enabled).
  -H:?UseTrappingNullChecks                    Use traps for null checks instead of explicit null-checks. Default: + (enabled).
  -H:?UseTypeCheckHints                        Default: + (enabled).
  -H:UserRequestedGCPolicy="com.oracle.svm.core.genscavenge.HeapPolicy$AlwaysCollectCompletely"
                                               Policy used when user code requests garbage collection.
  -H:Verify=...                                Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax. Default: None
  -H:?VerifyBalancedMonitors                   Emit extra code to dynamically check monitor operations are balanced. Default: - (disabled).
  -H:?VerifyDeoptimizationEntryPoints          Verify that all possible deoptimization entry points have been properly compiled and registered in the metadata.
                                               Default: - (disabled).
  -H:?VerifyDirtyCardsAfterCollection          Verify dirty cards after each collection. Default: - (disabled).
  -H:?VerifyDirtyCardsBeforeCollection         Verify dirty cards before each collection. Default: - (disabled).
  -H:?VerifyGraalGraphEdges                    Perform expensive verification of graph inputs, usages, successors and predecessors. Default: - (disabled).
  -H:?VerifyGraalGraphs                        Verify graphs often during compilation when assertions are turned on. Default: + (enabled).
  -H:?VerifyGraalPhasesSize                    Verify before - after relation of the relative, computed, code size of a graph. Default: - (disabled).
  -H:?VerifyHeap                               Verify the heap before and after each collection. Default: - (disabled).
  -H:?VerifyHeapAfterCollection                Verify the heap after each collection. Default: - (disabled).
  -H:?VerifyHeapAtReturn                       Perform platform dependent validation of the Java heap at returns. Default: - (disabled).
  -H:?VerifyHeapBeforeCollection               Verify the heap before each collection. Default: - (disabled).
  -H:?VerifyKillCFGUnusedNodes                 Verify that there are no new unused nodes when performing killCFG. Default: - (disabled).
  -H:?VerifyNamingConventions                  Verify naming conventions during image construction. Default: - (disabled).
  -H:?VerifyPhases                             Default: - (disabled).
  -H:?VerifyStackAfterCollection               Verify stacks after each collection. Default: - (disabled).
  -H:?VerifyStackBeforeCollection              Verify stacks before each collection. Default: - (disabled).
  -H:?ZapChunks                                Fill unused memory chunks with a sentinel value. Default: - (disabled).
  -H:?ZapConsumedHeapChunks                    After use, Fill memory chunks with a sentinel value. Default: - (disabled).
  -H:?ZapProducedHeapChunks                    Before use, fill memory chunks with a sentinel value. Default: - (disabled).
  -H:?ZapStackOnMethodEntry                    Default: - (disabled).
  -R:AOTInliningDepthToSizeRate=2.5            
  -R:AOTInliningSizeMaximum=300                
  -R:AOTInliningSizeMinimum=50                 
  -R:?AOTVerifyOops                            Generate verify oop checks in AOT code. Default: - (disabled).
  -R:ASMInstructionProfiling=...               Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions.
                                               Compare with subclasses of Assembler.InstructionCounter. Default: None
  -R:?AbortOnBenchmarkCounterOverflow          Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters. Default: -
                                               (disabled). [Extra help available]
  -R:ActiveProcessorCount=-1                   Overwrites the available number of processors provided by the OS. Any value <= 0 means using the processor count from
                                               the OS.
  -R:AggregatedMetricsFile=...                 File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a
                                               more human readable format is used. If not specified, metrics are dumped to the console. Default: None
  -R:?AliasArrayTypeFlows                      Model all array type flows using a unique elements type flow abstraction. Default: + (enabled).
  -R:AllocationProfilingThreshold=1048576      The minimum size in bytes required for printing an allocation profiling entry.
  -R:?AllocationSiteSensitiveHeap              A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site.
                                               Default: - (disabled).
  -R:?AlwaysInlineIntrinsics                   Unconditionally inline intrinsics. Default: - (disabled).
  -R:?AlwaysInlineVTableStubs                  Default: - (disabled).
  -R:AnalysisContextSensitivity="insens"       Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens
                                               (context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive
                                               analysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap).
  -R:AnalysisSizeCutoff=8                      The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation.
  -R:AnalysisStatisticsFile=...                Analysis results statistics file. Default: None
  -R:?BenchmarkCounterPrintingCutoff           Use a cutoff to print only most significant counters. Default: + (enabled).
  -R:?BenchmarkCountersDumpDynamic             Dump dynamic counters. Default: + (enabled).
  -R:?BenchmarkCountersDumpStatic              Dump static counters. Default: - (disabled).
  -R:BenchmarkCountersFile=...                 File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human
                                               readable format is used. The fields in the CSV format are: category, group, name, value. Default: None
  -R:BenchmarkDynamicCounters=...              Turn on the benchmark counters. The format of this option is:. Default: None [Extra help available]
  -R:?BootstrapInitializeOnly                  Do not compile anything on bootstrap but just initialize the compiler. Default: - (disabled).
  -R:BootstrapTimeout=15.0                     Maximum time in minutes to spend bootstrapping (0 to disable this limit).
  -R:BootstrapWatchDogCriticalRateRatio=0.25   Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables
                                               monitoring).
  -R:?CanOmitFrame                             Default: + (enabled).
  -R:?CanonicalGraphStringsCheckConstants      Exclude virtual nodes when dumping canonical text for graphs. Default: - (disabled).
  -R:?CanonicalGraphStringsExcludeVirtuals     Exclude virtual nodes when dumping canonical text for graphs. Default: + (enabled).
  -R:?CanonicalGraphStringsRemoveIdentities    Attempts to remove object identity hashes when dumping canonical text for graphs. Default: + (enabled).
  -R:?ClearMetricsAfterBootstrap               Clear the debug metrics after bootstrap. Default: - (disabled).
  -R:?CompilationBailoutAsFailure              Treat compilation bailouts like compilation failures. Default: - (disabled).
  -R:CompilationCountLimit=0                   The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit).
  -R:CompilationExcludePhases=...              Exclude certain phases from compilation, either unconditionally or with a method filter. Default: None
  -R:CompilationExpirationPeriod=300           Time limit in seconds before a compilation expires (0 to disable the limit). The compilation alarm will be implicitly
                                               disabled if assertions are enabled.
  -R:CompilationFailureAction=Silent           Specifies the action to take when compilation fails. [Extra help available]
  -R:CompilationIsolateAddressSpaceSize=0      Size of the reserved address space of each compilation isolate (0: default for new isolates).
  -R:CompilationWatchDogStackTraceInterval=60.0
                                               Interval in seconds between a watch dog reporting stack traces for long running compilations.
  -R:CompilationWatchDogStartDelay=0.0         Delay in seconds before watch dog monitoring a compilation (0 disables monitoring).
  -R:?CompileGraalWithC1Only                   In tiered mode compile Graal and JVMCI using optimized first tier code. Default: + (enabled).
  -R:?CompileInIsolates                        Activate runtime compilation in separate isolates (enable support during image build with option
                                               SupportCompileInIsolates). Default: + (enabled).
  -R:CompilerConfiguration=...                 Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority
                                               is used. To see the set of available configurations, supply the value 'help' to this option. Default: None
  -R:?ConditionalElimination                   Default: + (enabled).
  -R:ConditionalEliminationMaxIterations=4     
  -R:Count=...                                 Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value
                                               enables all counters unconditionally. Default: None
  -R:Counters=...                              Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables
                                               all counters unconditionally. Default: None
  -R:CrashAt=...                               Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation
                                               crashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout
                                               exception and a ':PermanentBailout' suffix will raise a permanent bailout exception. Default: None
  -R:?DebugStubsAndSnippets                    Enable debug output for stub code generation and snippet preparation. Default: - (disabled).
  -R:?DeoptALot                                Default: - (disabled).
  -R:?DeoptAfterOSR                            Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of
                                               the method. Default: + (enabled).
  -R:DeoptsToDisableOptimisticOptimization=40  
  -R:?DetailedAsserts                          Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled. Default: - (disabled).
  -R:DiagnoseDumpLevel=3                       Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details.
                                               file:doc-files/CompilationFailureActionHelp.txt.
  -R:?DisableIntercept                         Disable intercepting exceptions in debug scopes. Default: - (disabled).
  -R:?DivertParameterReturningMethod           Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return. Default:
                                               + (enabled).
  -R:Dump=...                                  Filter pattern for specifying scopes in which dumping is enabled. Default: None [Extra help available]
  -R:?DumpOnError                              Send compiler IR to dump handlers on error. Default: - (disabled).
  -R:DumpOnPhaseChange=...                     Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the
                                               simple name of the phase class. Default: None
  -R:DumpPath="graal_dumps"                    The directory where various Graal dump files are written.
  -R:?DumpingErrorsAreFatal                    Treat any exceptions during dumping as fatal. Default: - (disabled).
  -R:?DuplicateIrreducibleLoops                When enabled, some limited amount of duplication will be performed in order compile code containing irreducible loops.
                                               Default: + (enabled).
  -R:?DynamicCountersPrintGroupSeparator       Use grouping separators for number printing. Default: + (enabled).
  -R:?EagerSnippets                            Eagerly construct extra snippet info. Default: - (disabled).
  -R:EscapeAnalysisIterations=2                
  -R:EscapeAnalysisLoopCutoff=20               
  -R:EscapeAnalyzeOnly=...                     Default: None
  -R:ExactFullUnrollMaxNodes=800               
  -R:ExactPartialUnrollMaxNodes=200            
  -R:?ExhaustiveHeapScan                       Scan all objects reachable from roots for analysis. By default false. Default: - (disabled).
  -R:?ExitVMOnException                        Alias for CompilationFailureAction=ExitVM. Default: - (disabled).
  -R:?ExtendedAsserts                          Enable extended asserts which slow down analysis. Default: - (disabled).
  -R:?FailedLoopExplosionIsFatal               Do not bail out but throw an exception on failed loop explosion. Default: - (disabled).
  -R:FallbackExecutorRuntimeJavaArg=...        Internal option used to specify runtime java arguments for FallbackExecutor. Default: None
  -R:?ForceDumpGraphsBeforeCompilation         Force-dump graphs before compilation. Default: - (disabled).
  -R:?FullUnroll                               Default: + (enabled).
  -R:FullUnrollConstantCompareBoost=15         
  -R:FullUnrollMaxApplication=60               
  -R:FullUnrollMaxIterations=600               
  -R:FullUnrollMaxNodes=400                    
  -R:GCDebugStartCycle=-1                      Start tracing compiled GC barriers after N garbage collections (disabled if N <= 0).
  -R:?GenLoopSafepoints                        Default: + (enabled).
  -R:?GeneratePIC                              Generate position independent code. Default: - (disabled).
  -R:?GenericDynamicCounters                   Turn on the benchmark counters, and displays the results on VM shutdown. Default: - (disabled).
  -R:?GraalArithmeticStubs                     Use Graal arithmetic stubs instead of HotSpot stubs where possible. Default: + (enabled).
  -R:GraalCompileOnly=...                      A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is
                                               redirected to a lower tier compiler. The filter format is the same as for the MethodFilter option. Default: None
  -R:GraphCompressionThreshold=70              Graal graph compression is performed when percent of live nodes falls below this value.
  -R:?GuardPriorities                          Default: + (enabled).
  -R:?HeapVerificationFailureIsFatal           Failed verification of the heap (if enabled) causes termination. Default: + (enabled).
  -R:?HotSpotDeoptExplicitExceptions           Testing only option that forces deopts for exception throws. Default: - (disabled).
  -R:?HotSpotPostOnExceptions                  Testing only option that forces deopts for exception throws. Default: - (disabled).
  -R:?HotSpotPrintInlining                     Print inlining optimizations. Default: - (disabled).
  -R:?HybridStaticContext                      Enable hybrid context for static methods, i.e. uses invocation site as context for static methods. Default: -
                                               (disabled).
  -R:ImageObjectTreeExpandRoots=""             Override the default suppression of specified roots. See: Reports.md.
  -R:ImageObjectTreeExpandTypes=""             Override the default suppression of specified types. See: Reports.md.
  -R:ImageObjectTreeSuppressRoots=""           Suppress the expansion of specified roots. See: Reports.md.
  -R:ImageObjectTreeSuppressTypes=""           Suppress the expansion of specified types. See: Reports.md.
  -R:?ImmutableCode                            Try to avoid emitting code where patching is required. Default: - (disabled).
  -R:?Inline                                   Enable inlining. Default: + (enabled).
  -R:?InlineDuringParsing                      Inlines trivial methods during bytecode parsing. Default: + (enabled).
  -R:InlineDuringParsingMaxDepth=10            Maximum depth when inlining during bytecode parsing.
  -R:?InlineEverything                         Default: - (disabled).
  -R:?InlineIntrinsicsDuringParsing            Inlines intrinsic methods during bytecode parsing. Default: + (enabled).
  -R:?InlineMegamorphicCalls                   Inline calls with megamorphic type profile (i.e., not all types could be recorded). Default: + (enabled).
  -R:?InlineMonomorphicCalls                   Inline calls with monomorphic type profile. Default: + (enabled).
  -R:?InlinePartialIntrinsicExitDuringParsing  Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an
                                               intrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not
                                               support. Default: + (enabled).
  -R:?InlinePolymorphicCalls                   Inline calls with polymorphic type profile. Default: + (enabled).
  -R:?InlineVTableStubs                        Default: + (enabled).
  -R:InliningDepthError=1000                   Maximum inlining depth during partial evaluation before reporting an infinite recursion.
  -R:InspectServerContentPath="inspect"        Path to the contents of the Inspect web server.
  -R:?InstallSegfaultHandler                   Install segfault handler that prints register contents and full Java stacktrace. Default: enabled for an executable,
                                               disabled for a shared library. 
  -R:?InterceptBailout                         Intercept also bailout exceptions. Default: - (disabled).
  -R:?Intrinsify                               Use compiler intrinsifications. Default: + (enabled).
  -R:?LIRDynMoveProfileMethod                  Enable dynamic move profiling per method. Default: - (disabled).
  -R:?LIROptConstantLoadOptimization           Enable constant load optimization. 
  -R:?LIROptControlFlowOptimizer               
  -R:?LIROptEdgeMoveOptimizer                  
  -R:?LIROptLSRAEliminateSpillMoves            Enable spill move elimination. 
  -R:?LIROptLSRAOptimizeSpillPosition          Enable spill position optimization. 
  -R:?LIROptLSStackSlotAllocator               Use linear scan stack slot allocation. 
  -R:?LIROptNullCheckOptimizer                 
  -R:?LIROptRedundantMoveElimination           
  -R:?LIROptStackMoveOptimizer                 
  -R:?LIROptimization                          Enable LIR level optimiztations. Default: + (enabled).
  -R:?LIRProfileMethods                        Enables profiling of methods. Default: - (disabled).
  -R:?LIRProfileMoves                          Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads
                                               (constant to register) or copies (register to register). Default: - (disabled).
  -R:?LSRAOptSplitOnly                         LSRA optimization: Only split but do not reassign. Default: - (disabled).
  -R:?LSRAOptimization                         Enable LSRA optimization. Default: - (disabled).
  -R:LimitInlinedInvokes=5.0                   
  -R:?LimitObjectArrayLength                   Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for
                                               that type. The analysis must be heap sensitive. Default: - (disabled).
  -R:?ListMetrics                              Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note
                                               that this only lists the metrics that were initialized during the VM execution and so will not include metrics for
                                               compiler code that is not executed. Default: - (disabled).
  -R:?LoadExceptionObjectInVM                  Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception
                                               handler. Default: - (disabled).
  -R:Log=...                                   Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax. Default: None
  -R:LogFile=...                               File to which logging is sent.  A %p in the name will be replaced with a string identifying the process, usually the
                                               process id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will
                                               be replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate
                                               id>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err.
                                               Default: None
  -R:?LogVerbose                               Enable more verbose log output when available. Default: - (disabled).
  -R:LoopHeaderAlignment=16                    Alignment in bytes for loop header blocks.
  -R:LoopMaxUnswitch=3                         
  -R:?LoopPeeling                              Default: + (enabled).
  -R:?LoopPredication                          Default: + (enabled).
  -R:?LoopPredicationMainPath                  Default: + (enabled).
  -R:?LoopUnswitch                             Default: + (enabled).
  -R:LoopUnswitchFrequencyBoost=10.0           
  -R:LoopUnswitchMaxIncrease=500               
  -R:LoopUnswitchTrivial=10                    
  -R:?MatchExpressions                         Allow backend to match complex expressions. Default: + (enabled).
  -R:MaxCallingContextDepth=0                  The maximum length of the methods context chains.
  -R:MaxCallingContextWidth=0                  The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context
                                               depth are different.
  -R:MaxCompilationProblemsPerAction=2         The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before
                                               changing to a less verbose action. This does not apply to the ExitVM action.
  -R:MaxConstantObjectsPerType=100             The maximum number of constant objects recorded for each type before merging the constants into one unique constant
                                               object per type. The analysis must be heap sensitive. It has a minimum value of 1.
  -R:MaxDirectMemorySize=0                     Maximum total size of NIO direct-buffer allocations.
  -R:MaxDuplicationFactor=2.0                  How much duplication can happen because of irreducible loops before bailing out.
  -R:MaxHeapContextDepth=0                     The maximum length of the context used to model a heap object in addition to the allocation site; used only when
                                               ContextSensitiveHeap is enabled.
  -R:MaxHeapContextWidth=0                     The maximum number of contexts to record for a heap object.  It only affects the analysis when the max and min calling
                                               context depth are different.
  -R:MaxHeapSize=0                             The maximum heap size at run-time, in bytes.
  -R:MaxNewSize=0                              The maximum size of the young generation at run-time, in bytes.
  -R:MaxObjectSetSize=100                      The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type.
                                               The analysis must be heap sensitive. It has a minimum value of 1.
  -R:MaxTemplatesPerSnippet=50                 
  -R:MaximumDesiredSize=20000                  Maximum desired size of the compiler graph in nodes.
  -R:MaximumEscapeAnalysisArrayLength=128      The maximum length of an array that will be escape analyzed.
  -R:MaximumHeapSizePercent=80                 The maximum heap size as percent of physical memory.
  -R:MaximumInliningSize=300                   Inlining is explored up to this number of nodes in the graph for each call site.
  -R:MaximumLoopExplosionCount=10000           Max number of loop explosions per method.
  -R:MaximumRecursiveInlining=5                Maximum level of recursive inlining.
  -R:MaximumYoungGenerationSizePercent=10      The maximum size of the young generation as a percentage of the maximum heap size.
  -R:MegamorphicInliningMinMethodProbability=0.33
                                               Minimum probability for methods to be inlined for megamorphic type profiles.
  -R:MemUseTrackers=...                        Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An
                                               empty value enables all memory usage trackers unconditionally. Default: None
  -R:MethodFilter=...                          Pattern for matching methods. The syntax for a pattern is:. Default: None [Extra help available]
  -R:?MethodFilterRootOnly                     Only check MethodFilter against the root method in the context if true, otherwise check all methods. Default: -
                                               (disabled).
  -R:MethodInlineBailoutLimit=5000             Per-compilation method inlining exploration limit before giving up (use 0 to disable).
  -R:MetricsFile=...                           File to which metrics are dumped per compilation. Default: None [Extra help available]
  -R:MinCallingContextDepth=0                  The minimum length of the methods context chains.
  -R:MinHeapContextDepth=0                     The minimum length of the context used to model a heap object in addition to the allocation site; used only when
                                               ContextSensitiveHeap is enabled.
  -R:MinHeapSize=0                             The minimum heap size at run-time, in bytes.
  -R:MinimalBulkZeroingSize=2048               If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold.
  -R:MinimumPeelFrequency=0.35                 
  -R:NDCV=0                                    Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose, 3 = fatal).
  -R:?NodeCounters                             Counts the number of instances of each node class. Default: - (disabled).
  -R:NonFatalIdenticalCompilationSnapshots=20  Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck
                                               compilation.
  -R:ObjdumpExecutables=...                    Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled.
                                               Otherwise, the first existing executable in the list is used. Default: None
  -R:?OmitHotExceptionStacktrace               Default: - (disabled).
  -R:?OptAssumptions                           Default: + (enabled).
  -R:?OptConvertDeoptsToGuards                 Default: + (enabled).
  -R:?OptDeoptimizationGrouping                Default: + (enabled).
  -R:?OptDevirtualizeInvokesOptimistically     Default: + (enabled).
  -R:?OptEarlyReadElimination                  Default: + (enabled).
  -R:?OptEliminateGuards                       Default: + (enabled).
  -R:?OptFloatingReads                         Default: + (enabled).
  -R:?OptImplicitNullChecks                    Default: + (enabled).
  -R:?OptReadElimination                       Default: + (enabled).
  -R:?OptScheduleOutOfLoops                    Default: + (enabled).
  -R:?PartialEscapeAnalysis                    Default: + (enabled).
  -R:?PartialUnroll                            Default: + (enabled).
  -R:?PeelALot                                 Default: - (disabled).
  -R:PercentTimeInIncrementalCollection=50     Percentage of total collection time that should be spent on young generation collections.
  -R:?PreferContainerQuotaForCPUCount          Calculate the container CPU availability based on the value of quotas (if set), when true. Otherwise, use the CPU shares
                                               value, provided it is less than quota. Default: + (enabled).
  -R:?PrintAnalysisCallTree                    Print analysis call tree, a breadth-first tree reduction of the call graph. Default: - (disabled).
  -R:?PrintAnalysisStatistics                  Print analysis results statistics. Default: - (disabled).
  -R:?PrintBackendCFG                          Enable dumping LIR, register allocation and code generation info to the C1Visualizer. Default: - (disabled).
  -R:?PrintBlockMapping                        Enable dumping CFG built during initial BciBlockMapping. Default: - (disabled).
  -R:?PrintCFG                                 Enable dumping to the C1Visualizer. Enabling this option implies PrintBackendCFG. Default: - (disabled).
  -R:PrintCanonicalGraphStringFlavor=0         Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes
                                               involving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small
                                               structure differences).
  -R:?PrintCanonicalGraphStrings               Enable dumping canonical text from for graphs. Default: - (disabled).
  -R:?PrintCompilation                         Print an informational line to the console for each completed compilation. Default: - (disabled).
  -R:?PrintDetailedAllocationProfiling         Print detailed information for each allocation site. Default: + (enabled).
  -R:PrintFlags=...                            Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug). Default: None
  -R:PrintFlagsWithExtraHelp=...               Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra
                                               help. Default: None
  -R:?PrintGC                                  Print summary GC information after each collection. Default: - (disabled).
  -R:?PrintGCSummary                           Print summary GC information after application main method returns. Default: - (disabled).
  -R:?PrintGCTimeStamps                        Print a time stamp at each collection, if +PrintGC or +VerboseGC. Default: - (disabled).
  -R:?PrintGCTimes                             Print the time for each of the phases of each collection, if +VerboseGC. Default: - (disabled).
  -R:PrintGraph=File                           Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written. [Extra help available]
  -R:?PrintGraphFile                           Setting to true sets PrintGraph=file, setting to false sets PrintGraph=network. Default: + (enabled).
  -R:PrintGraphHost="127.0.0.1"                Host part of the address to which graphs are dumped.
  -R:PrintGraphPort=4445                       Port part of the address to which graphs are dumped in binary format.
  -R:?PrintGraphWithSchedule                   Schedule graphs as they are dumped. Default: - (disabled).
  -R:?PrintHeapShape                           Print the shape of the heap before and after each collection, if +VerboseGC. Default: - (disabled).
  -R:?PrintIRWithLIR                           Print HIR along side LIR as the latter is generated. Default: - (disabled).
  -R:?PrintImageObjectTree                     Print boot image object hierarchy. Default: - (disabled).
  -R:?PrintLIRWithAssembly                     Include the LIR as comments with the final assembly. Default: - (disabled).
  -R:?PrintPointsToStatistics                  Report analysis statistics. Default: - (disabled).
  -R:?PrintProfilingInformation                Print profiling information when parsing a method's bytecode. Default: - (disabled).
  -R:?PrintSynchronizedAnalysis                Print types used for Java synchronization. Default: - (disabled).
  -R:?ProbabilisticProfiling                   Control probabilistic profiling on AMD64. Default: + (enabled).
  -R:?ProfileAllocations                       Enable profiling of allocation sites. Default: - (disabled).
  -R:ProfileAllocationsContext=AllocatingMethod
                                               Control the naming and granularity of the counters when using ProfileAllocations. [Extra help available]
  -R:?ProfileAnalysisOperations                Track the progress of the static analysis. Default: - (disabled).
  -R:?ProfileBackedges                         Emit profiling of backedges. Default: + (enabled).
  -R:?ProfileCompiledMethods                   Default: - (disabled).
  -R:?ProfileConstantObjects                   Track the creation of constant objects. Default: - (disabled).
  -R:?ProfileInvokes                           Emit profiling of invokes. Default: + (enabled).
  -R:?ProfileMonitors                          Enable profiling of monitor operations. Default: - (disabled).
  -R:?ProfileSimpleMethods                     Profile simple methods. Default: + (enabled).
  -R:?RawConditionalElimination                Default: + (enabled).
  -R:ReadEliminationMaxLoopVisits=5            
  -R:?ReassociateExpressions                   Re-associate loop invariants and constants. Default: + (enabled).
  -R:?ReduceDCE                                Disable optional dead code eliminations. Default: + (enabled).
  -R:RegisterPressure=...                      Comma separated list of registers that register allocation is limited to. Default: None
  -R:?RelaxTypeFlowStateConstraints            Allow a type flow state to contain types not compatible with its declared type. Default: + (enabled).
  -R:?RemoveNeverExecutedCode                  Default: + (enabled).
  -R:?RemoveSaturatedTypeFlows                 Enable the type flow saturation analysis performance optimization. Default: + (enabled).
  -R:?ReplaceInputsWithConstantsBasedOnStamps  Default: + (enabled).
  -R:SafepointPromptnessFailureNanos=0         Exit the VM if I can not come to a safepoint in this many nanoseconds. 0 implies forever.
  -R:SafepointPromptnessWarningNanos=0         Print a warning if I can not come to a safepoint in this many nanoseconds. 0 implies forever.
  -R:?ScanObjectsParallel                      Object scanning in parallel. Default: + (enabled).
  -R:ShowConfiguration=none                    Writes to the VM log information about the compiler configuration selected.
  -R:?ShowDumpFiles                            Print the name of each dump file path as it's created. Default: - (disabled).
  -R:?ShowSubstitutionSourceInfo               Controls whether the source position information of snippets and method substitutions are exposed to HotSpot.  Can be
                                               useful when profiling to get more precise position information. Default: - (disabled).
  -R:?SimpleFastInflatedLocking                Handle simple cases for inflated monitors in the fast-path. Default: + (enabled).
  -R:SimpleMethodCalls=1                       Maximum number of calls in a simple method.
  -R:SimpleMethodGraphSize=256                 Maximum number of nodes in a graph for a simple method.
  -R:SimpleMethodIndirectCalls=0               Maximum number of indirect calls in a simple moethod.
  -R:SmallCompiledLowLevelGraphSize=330        If the previous low-level graph size of the method exceeds the threshold, it is not inlined.
  -R:?SnippetCounters                          Enable counters for various paths in snippets. Default: - (disabled).
  -R:SpectrePHTBarriers=None                   Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1). [Extra help available]
  -R:?SpectrePHTIndexMasking                   Mask indices to scope access to allocation size after bounds check. Default: - (disabled).
  -R:StackSize=0                               The size of each thread stack at run-time, in bytes.
  -R:?StressExplicitExceptionCode              Stress the code emitting explicit exception throwing code. Default: - (disabled).
  -R:?StressInvokeWithExceptionNode            Stress the code emitting invokes with explicit exception edges. Default: - (disabled).
  -R:?StressTestEarlyReads                     Stress the code by emitting reads at earliest instead of latest point. Default: - (disabled).
  -R:StringIndexOfLimit=4096                   String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is lower than
                                               this value.
  -R:?SupportJsrBytecodes                      Default: + (enabled).
  -R:?SupportOSRWithLocks                      Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits
                                               mappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in
                                               the graph. Default: + (enabled).
  -R:TearDownFailureNanos=0                    The number of nanoseconds before tearing down an isolate gives a failure message.  0 implies no message.
  -R:TearDownWarningNanos=0                    The number of nanoseconds before and between which tearing down an isolate gives a warning message.  0 implies no
                                               warning.
  -R:TierABackedgeNotifyFreqLog=16             Backedge notification frequency.
  -R:TierABackedgeProfileProbabilityLog=12     Backedge profile probability.
  -R:TierAInvokeInlineeNotifyFreqLog=-1        Inlinee invocation notification frequency (-1 means count, but do not notify).
  -R:TierAInvokeNotifyFreqLog=13               Invocation notification frequency.
  -R:TierAInvokeProfileProbabilityLog=8        Invocation profile probability.
  -R:?TieredAOT                                Do profiling and callbacks to tiered runtime. Default: - (disabled).
  -R:Time=...                                  Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value
                                               enables all timers unconditionally. Default: None
  -R:TimedDynamicCounters=-1                   Turn on the benchmark counters, and displays the results every n milliseconds.
  -R:Timers=...                                Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all
                                               timers unconditionally. Default: None
  -R:TraceBytecodeParserLevel=0                The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame
                                               state trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be
                                               interleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used
                                               to refine tracing to selected methods.
  -R:?TraceCodeCache                           Print logging information for runtime code cache modifications. Default: - (disabled).
  -R:?TraceDeoptimization                      Print logging information for every deoptimization. Default: - (disabled).
  -R:?TraceDeoptimizationDetails               Print verbose logging information for every deoptimization. Default: - (disabled).
  -R:?TraceEscapeAnalysis                      Default: - (disabled).
  -R:?TraceExceptionHandlerStub                Trace execution of stub used to handle an exception thrown by a callee. Default: - (disabled).
  -R:?TraceHeapChunks                          Trace heap chunks during collections, if +VerboseGC and +PrintHeapShape. Default: - (disabled).
  -R:?TraceInlineDuringParsing                 Traces inlining performed during bytecode parsing. Default: - (disabled).
  -R:?TraceInlining                            Enable tracing of inlining decisions. Default: - (disabled). [Extra help available]
  -R:?TraceInliningForStubsAndSnippets         Enable inlining decision tracing in stubs and snippets. Default: - (disabled).
  -R:TraceLIRGeneratorLevel=0                  The trace level for the LIR generator.
  -R:TraceMonitorsMethodFilter=...             Trace monitor operations in methods whose fully qualified name contains this substring. Default: None
  -R:TraceMonitorsTypeFilter=...               Trace monitor operations on objects whose type contains this substring. Default: None
  -R:?TraceParserPlugins                       Traces use of plugins during bytecode parsing. Default: - (disabled).
  -R:?TraceUnwindStub                          Trace execution of the stub that routes an exception to a handler in the calling frame. Default: - (disabled).
  -R:?TrackAccessChain                         Track the callers for methods and accessing methods for fields. Default: - (disabled).
  -R:?TrackInputFlows                          Track the input for type flows. Default: - (disabled).
  -R:TrackMemUse=...                           Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An
                                               empty value enables all memory use trackers unconditionally. Default: None
  -R:?TrackNodeInsertion                       Track source stack trace where a node was inserted into the graph. Default: - (disabled).
  -R:?TrackNodeSourcePosition                  Track the NodeSourcePosition. Default: - (disabled).
  -R:TrivialInliningSize=10                    Graphs with less than this number of nodes are trivial and therefore always inlined.
  -R:TruffleCompilerConfiguration=...          Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration). Default:
                                               None
  -R:?TrustFinalDefaultFields                  Determines whether to treat final fields with default values as constant. Default: + (enabled).
  -R:TypeCheckMaxHints=2                       The maximum number of profiled types that will be used when compiling a profiled type check. Note that
                                               TypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks.
  -R:TypeCheckMinProfileHitProbability=0.5     If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the
                                               type check will be compiled without profiling info.
  -R:TypeFlowSaturationCutoff=20               The maximum number of types recorded in a type flow. -1 indicates no limitation.
  -R:?UnresolvedIsError                        Report unresolved elements as errors. Default: + (enabled).
  -R:UnrollMaxIterations=16                    
  -R:?UseBranchesWithin32ByteBoundary          Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See
                                               https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for
                                               more details. If not set explicitly, the default value will be determined according to the CPU model. Default: -
                                               (disabled).
  -R:?UseCompilationStatistics                 Enables CompilationStatistics. Default: - (disabled).
  -R:?UseEncodedGraphs                         Encode and decode snippets and substitutions before parsing to test libgraal code path. This option is ignored in the
                                               context of libgraal. Default: - (disabled).
  -R:?UseExceptionProbability                  Default: + (enabled).
  -R:?UseGraalStubs                            Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code. Default: +
                                               (enabled).
  -R:?UseLoopLimitChecks                       Default: + (enabled).
  -R:?UseSnippetGraphCache                     Use a cache for snippet graphs. Default: + (enabled).
  -R:?UseSnippetTemplateCache                  Use a LRU cache for snippet templates. Default: + (enabled).
  -R:?UseTrappingNullChecks                    Use traps for null checks instead of explicit null-checks. Default: + (enabled).
  -R:?UseTypeCheckHints                        Default: + (enabled).
  -R:UserRequestedGCThreshold=16777216         With the skeptical policy for user-requested collections, the threshold for the young generation size to cause a
                                               collection.
  -R:?VerboseGC                                Print more information about the heap before and after each collection. Default: - (disabled).
  -R:Verify=...                                Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax. Default: None
  -R:?VerifyBalancedMonitors                   Emit extra code to dynamically check monitor operations are balanced. Default: - (disabled).
  -R:?VerifyGraalGraphEdges                    Perform expensive verification of graph inputs, usages, successors and predecessors. Default: - (disabled).
  -R:?VerifyGraalGraphs                        Verify graphs often during compilation when assertions are turned on. Default: + (enabled).
  -R:?VerifyGraalPhasesSize                    Verify before - after relation of the relative, computed, code size of a graph. Default: - (disabled).
  -R:?VerifyHeapAtReturn                       Perform platform dependent validation of the Java heap at returns. Default: - (disabled).
  -R:?VerifyKillCFGUnusedNodes                 Verify that there are no new unused nodes when performing killCFG. Default: - (disabled).
  -R:?VerifyPhases                             Default: - (disabled).
  -R:?WriteableCodeCache                       Allocate code cache with write access, allowing inlining of objects. Default: - (disabled).
  -R:?ZapStackOnMethodEntry                    Default: - (disabled).
