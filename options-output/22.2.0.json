[ {
  "type" : "HOSTED",
  "name" : "±AOTInline",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Deprecated."
}, {
  "type" : "HOSTED",
  "name" : "±AOTTrivialInline",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Perform trivial method inlining in the AOT compiled native image."
}, {
  "type" : "HOSTED",
  "name" : "APIFunctionPrefix",
  "dataType" : "STRING",
  "defaultValue" : "graal_",
  "description" : "Prefix that is added to the names of API functions."
}, {
  "type" : "HOSTED",
  "name" : "ASMInstructionProfiling",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions. Compare with subclasses of Assembler.InstructionCounter."
}, {
  "type" : "HOSTED",
  "name" : "±AbortOnBenchmarkCounterOverflow",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters."
}, {
  "type" : "HOSTED",
  "name" : "±AddAllCharsets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Make all hosted charsets available at run time."
}, {
  "type" : "HOSTED",
  "name" : "±AddAllFileSystemProviders",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Make all supported providers returned by FileSystemProvider.installedProviders() available at run time."
}, {
  "type" : "HOSTED",
  "name" : "AddExports",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Value <module>/<package><target-module>(,<target-module>)* updates <module> to export <package> to <target-module>, regardless of module declaration. <target-module> can be ALL-UNNAMED to export to all unnamed modules."
}, {
  "type" : "HOSTED",
  "name" : "AddOpens",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Value <module>/<package><target-module>(,<target-module>)* updates <module> to open <package> to <target-module>, regardless of module declaration."
}, {
  "type" : "HOSTED",
  "name" : "AddReads",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Value <module><target-module>(,<target-module>)* updates <module> to read <target-module>, regardless of module declaration. <target-module> can be ALL-UNNAMED to read all unnamed modules."
}, {
  "type" : "HOSTED",
  "name" : "AdditionalSecurityProviders",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma-separated list of additional security provider fully qualified class names to mark as used.Note that this option is only necessary if you use custom engine classes not available in JCA that are not JCA compliant."
}, {
  "type" : "HOSTED",
  "name" : "AdditionalSecurityServiceTypes",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma-separated list of additional security service types (fully qualified class names) for automatic registration. Note that these must be JCA compliant."
}, {
  "type" : "HOSTED",
  "name" : "AggregatedMetricsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a more human readable format is used. If not specified, metrics are dumped to the console."
}, {
  "type" : "HOSTED",
  "name" : "±AliasArrayTypeFlows",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Model all array type flows using a unique elements type flow abstraction."
}, {
  "type" : "HOSTED",
  "name" : "AlignedHeapChunkSize",
  "dataType" : "LONG",
  "defaultValue" : 1048576,
  "description" : "The size of an aligned chunk."
}, {
  "type" : "HOSTED",
  "name" : "AllocateInstancePrefetchLines",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Number of cache lines to load after the object address using prefetch instructions."
}, {
  "type" : "HOSTED",
  "name" : "AllocatePrefetchDistance",
  "dataType" : "LONG",
  "defaultValue" : 192,
  "description" : "Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread has its own allocation point."
}, {
  "type" : "HOSTED",
  "name" : "AllocatePrefetchInstr",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Sets the prefetch instruction to prefetch ahead of the allocation pointer. Possible values are from 0 to 3. The actual instructions behind the values depend on the platform."
}, {
  "type" : "HOSTED",
  "name" : "AllocatePrefetchLines",
  "dataType" : "LONG",
  "defaultValue" : 4,
  "description" : "Number of cache lines to load after the array allocation using prefetch instructions."
}, {
  "type" : "HOSTED",
  "name" : "AllocatePrefetchStepSize",
  "dataType" : "LONG",
  "defaultValue" : 64,
  "description" : "Sets the step size (in bytes) for sequential prefetch instructions."
}, {
  "type" : "HOSTED",
  "name" : "AllocatePrefetchStyle",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Generated code style for prefetch instructions: for 0 or less no prefetch instructions are generated and for 1 or more prefetch instructions are introduced after each allocation."
}, {
  "type" : "HOSTED",
  "name" : "AllocationBeforePhysicalMemorySize",
  "dataType" : "LONG",
  "defaultValue" : 1048576,
  "description" : "Bytes that can be allocated before (re-)querying the physical memory size."
}, {
  "type" : "HOSTED",
  "name" : "±AllocationProfiling",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable runtime profiling of allocation."
}, {
  "type" : "HOSTED",
  "name" : "±AllocationSiteSensitiveHeap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site."
}, {
  "type" : "HOSTED",
  "name" : "±AllowFoldMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Allow MethodTypeFlow to see @Fold methods."
}, {
  "type" : "HOSTED",
  "name" : "±AllowIncompleteClasspath",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Deprecated."
}, {
  "type" : "HOSTED",
  "name" : "±AllowJRTFileSystem",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable support for reading Java modules (jimage format) and the jrt:// file system. Requires java.home to be set at runtime."
}, {
  "type" : "HOSTED",
  "name" : "±AllowVMInspection",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables features that allow the VM to be inspected during runtime."
}, {
  "type" : "HOSTED",
  "name" : "±AllowVMInternalThreads",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines if VM internal threads (e.g., a dedicated VM operation or reference handling thread) are allowed in this image."
}, {
  "type" : "HOSTED",
  "name" : "±AlwaysInlineIntrinsics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Unconditionally inline intrinsics."
}, {
  "type" : "HOSTED",
  "name" : "±AlwaysInlineVTableStubs",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "AnalysisContextSensitivity",
  "dataType" : "STRING",
  "defaultValue" : "insens",
  "description" : "Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens (context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive analysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap)."
}, {
  "type" : "HOSTED",
  "name" : "AnalysisSizeCutoff",
  "dataType" : "LONG",
  "defaultValue" : 8,
  "description" : "The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation."
}, {
  "type" : "HOSTED",
  "name" : "AnalysisStatisticsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Analysis results statistics file."
}, {
  "type" : "HOSTED",
  "name" : "ArrayRegionEqualsConstantLimit",
  "dataType" : "LONG",
  "defaultValue" : 4096,
  "description" : "Array region equality checks will be evaluated at compile time if the receiver is a constant and its length is smaller than this value."
}, {
  "type" : "HOSTED",
  "name" : "±AssertInitializationSpecifiedForAllClasses",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Assert class initialization is specified for all classes."
}, {
  "type" : "HOSTED",
  "name" : "±BenchmarkCounterPrintingCutoff",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a cutoff to print only most significant counters."
}, {
  "type" : "HOSTED",
  "name" : "±BenchmarkCountersDumpDynamic",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Dump dynamic counters."
}, {
  "type" : "HOSTED",
  "name" : "±BenchmarkCountersDumpStatic",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Dump static counters."
}, {
  "type" : "HOSTED",
  "name" : "BenchmarkCountersFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human readable format is used. The fields in the CSV format are: category, group, name, value."
}, {
  "type" : "HOSTED",
  "name" : "BenchmarkDynamicCounters",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Turn on the benchmark counters. The format of this option is:."
}, {
  "type" : "HOSTED",
  "name" : "±BootstrapInitializeOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Do not compile anything on bootstrap but just initialize the compiler."
}, {
  "type" : "HOSTED",
  "name" : "BootstrapTimeout",
  "dataType" : "DOUBLE",
  "defaultValue" : 15.0,
  "description" : "Maximum time in minutes to spend bootstrapping (0 to disable this limit)."
}, {
  "type" : "HOSTED",
  "name" : "BootstrapWatchDogCriticalRateRatio",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.25,
  "description" : "Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables monitoring)."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputBreakdowns",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Show code and heap breakdowns as part of the build output."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputColorful",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Colorize build output."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputGCWarnings",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Print GC warnings as part of build output."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputLinks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Show links in build output."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputPrefix",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Prefix build output with '<pid>:<image name>'."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputProgress",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Report progress in build output."
}, {
  "type" : "HOSTED",
  "name" : "±BuildOutputUseNewStyle",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use new build output style."
}, {
  "type" : "HOSTED",
  "name" : "CAPCacheDir",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Directory where information generated by the CAnnotation Processor are cached."
}, {
  "type" : "HOSTED",
  "name" : "CCompilerOption",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Provide custom C compiler option used for query code compilation."
}, {
  "type" : "HOSTED",
  "name" : "CCompilerPath",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Provide custom path to C compiler used for query code compilation and linking."
}, {
  "type" : "HOSTED",
  "name" : "CLibraryPath",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Search path for C libraries passed to the linker (list of comma-separated directories)."
}, {
  "type" : "HOSTED",
  "name" : "CPUFeatures",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma separated list of CPU features that will be enabled while building the target executable, irrespective of whether they are supported by the hosted environment. Note that enabling features not present within the target environment may result in application crashes. The specific options available are target platform dependent. See --list-cpu-features for feature list."
}, {
  "type" : "HOSTED",
  "name" : "CStandard",
  "dataType" : "STRING",
  "defaultValue" : "C89",
  "description" : "C standard to use in header files. Possible values are: [C89, C99, C11]."
}, {
  "type" : "HOSTED",
  "name" : "±CanOmitFrame",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±CanonicalGraphStringsCheckConstants",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exclude virtual nodes when dumping canonical text for graphs."
}, {
  "type" : "HOSTED",
  "name" : "±CanonicalGraphStringsExcludeVirtuals",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Exclude virtual nodes when dumping canonical text for graphs."
}, {
  "type" : "HOSTED",
  "name" : "±CanonicalGraphStringsRemoveIdentities",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Attempts to remove object identity hashes when dumping canonical text for graphs."
}, {
  "type" : "HOSTED",
  "name" : "±CheckRecurringCallbackOnNativeToJavaTransition",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Test whether a thread's recurring callback is pending on each transition from native code to Java."
}, {
  "type" : "HOSTED",
  "name" : "±CheckToolchain",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Check if native-toolchain is known to work with native-image."
}, {
  "type" : "HOSTED",
  "name" : "Class",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Class containing the default entry point method. Optional if --shared is used."
}, {
  "type" : "HOSTED",
  "name" : "ClassInitialization",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "A comma-separated list of classes appended with their initialization strategy (':build_time', ':rerun', or ':run_time')."
}, {
  "type" : "HOSTED",
  "name" : "±ClearMetricsAfterBootstrap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Clear the debug metrics after bootstrap."
}, {
  "type" : "HOSTED",
  "name" : "CodeAlignment",
  "dataType" : "LONG",
  "defaultValue" : 16,
  "description" : "Alignment of AOT and JIT compiled code in bytes."
}, {
  "type" : "HOSTED",
  "name" : "±CodeCacheCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Count accesses to the image and runtime code info table."
}, {
  "type" : "HOSTED",
  "name" : "±CodeInfoEncoderCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Statistics about code and deoptimization information."
}, {
  "type" : "HOSTED",
  "name" : "CodeInfoIndexGranularity",
  "dataType" : "LONG",
  "defaultValue" : 256,
  "description" : "The granularity of the index for looking up code metadata. Should be a power of 2. Larger values make the index smaller, but access slower."
}, {
  "type" : "HOSTED",
  "name" : "±CollectImageBuildStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Collect information during image build about devirtualized invokes and bytecode exceptions."
}, {
  "type" : "HOSTED",
  "name" : "±CompilationBailoutAsFailure",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Treat compilation bailouts like compilation failures."
}, {
  "type" : "HOSTED",
  "name" : "CompilationCountLimit",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit)."
}, {
  "type" : "HOSTED",
  "name" : "CompilationExcludePhases",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Exclude certain phases from compilation, either unconditionally or with a method filter. Multiple exclusions can be specified separated by ':'. Phase names are matched as substrings, e.g.: CompilationExcludePhasesPartialEscape:LoopA.*,B.foo excludes PartialEscapePhase from all compilations and any phase containing 'Loop' in its name from compilations of all methods in class A and of method B.foo."
}, {
  "type" : "HOSTED",
  "name" : "CompilationExpirationPeriod",
  "dataType" : "LONG",
  "defaultValue" : 300,
  "description" : "Time limit in seconds before a compilation expires (0 to disable the limit). A non-zero value for this option is doubled if assertions are enabled and quadrupled if DetailedAsserts is true."
}, {
  "type" : "HOSTED",
  "name" : "CompilationFailureAction",
  "dataType" : "STRING",
  "defaultValue" : "Silent",
  "description" : "Specifies the action to take when compilation fails."
}, {
  "type" : "HOSTED",
  "name" : "CompilationWatchDogStackTraceInterval",
  "dataType" : "DOUBLE",
  "defaultValue" : 60.0,
  "description" : "Interval in seconds between a watch dog reporting stack traces for long running compilations."
}, {
  "type" : "HOSTED",
  "name" : "CompilationWatchDogStartDelay",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.0,
  "description" : "Delay in seconds before watch dog monitoring a compilation (0 disables monitoring)."
}, {
  "type" : "HOSTED",
  "name" : "±CompileGraalWithC1Only",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "In tiered mode compile Graal and JVMCI using optimized first tier code."
}, {
  "type" : "HOSTED",
  "name" : "CompilerBackend",
  "dataType" : "STRING",
  "defaultValue" : "lir",
  "description" : "Backend used by the compiler."
}, {
  "type" : "HOSTED",
  "name" : "CompilerConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority is used. To see the set of available configurations, supply the value 'help' to this option."
}, {
  "type" : "HOSTED",
  "name" : "±ConditionalElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ConditionalEliminationMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 4,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ConfigurationFileDirectories",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Directories directly containing configuration files for dynamic features at runtime."
}, {
  "type" : "HOSTED",
  "name" : "ConfigurationResourceRoots",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resource path above configuration resources for dynamic features at runtime."
}, {
  "type" : "HOSTED",
  "name" : "±ConfigureReflectionMetadata",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable runtime instantiation of reflection objects for non-invoked methods."
}, {
  "type" : "HOSTED",
  "name" : "Count",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value enables all counters unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "±CountWriteBarriers",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Instrument write barriers with counters."
}, {
  "type" : "HOSTED",
  "name" : "Counters",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables all counters unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "CrashAt",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation crashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout exception and a ':PermanentBailout' suffix will raise a permanent bailout exception."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardAll",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "In the dashboard dump, include all available information about the native image (this takes precedence over more specific flags)."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardBgv",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Set dashboard to use BGV format for dump."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardCode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "In the dashboard dump, include the breakdown of the code size across different packages."
}, {
  "type" : "HOSTED",
  "name" : "DashboardDump",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Enable dashboard dumps to the specified file."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardHeap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "In the dashboard dump, include the breakdown of the object sizes in the heap across different classes."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardJson",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Set dashboard to use JSON format for dump."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardPointsTo",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "In the dashboard dump, include the information about the points-to analysis."
}, {
  "type" : "HOSTED",
  "name" : "±DashboardPretty",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Set dashboard to use pretty print in JSON format."
}, {
  "type" : "HOSTED",
  "name" : "±DeadlockWatchdogExitOnTimeout",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Exit the image builder VM after printing call stacks."
}, {
  "type" : "HOSTED",
  "name" : "DeadlockWatchdogInterval",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "The interval in minutes between watchdog checks (0 disables the watchdog)."
}, {
  "type" : "HOSTED",
  "name" : "DebugInfoSourceCacheRoot",
  "dataType" : "STRING",
  "defaultValue" : "sources",
  "description" : "Directory under which to create source file cache for Application or GraalVM classes."
}, {
  "type" : "HOSTED",
  "name" : "DebugInfoSourceSearchPath",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)."
}, {
  "type" : "HOSTED",
  "name" : "±DebugStubsAndSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable debug output for stub code generation and snippet preparation."
}, {
  "type" : "HOSTED",
  "name" : "DefaultCharset",
  "dataType" : "STRING",
  "defaultValue" : "UTF-8",
  "description" : "Default charset of the image, by the default it is the same as the default charset of the image builder."
}, {
  "type" : "HOSTED",
  "name" : "DefaultLocale",
  "dataType" : "STRING",
  "defaultValue" : "zh-CN",
  "description" : "Default locale of the image, by the default it is the same as the default locale of the image builder."
}, {
  "type" : "HOSTED",
  "name" : "±DeleteLocalSymbols",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use linker option to remove all local symbols from image."
}, {
  "type" : "HOSTED",
  "name" : "±DeoptALot",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±DeoptAfterOSR",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of the method."
}, {
  "type" : "HOSTED",
  "name" : "±DeoptimizeAll",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Compiles all methods as deoptimization targets for testing."
}, {
  "type" : "HOSTED",
  "name" : "DeoptsToDisableOptimisticOptimization",
  "dataType" : "LONG",
  "defaultValue" : 40,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±DetailedAsserts",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled."
}, {
  "type" : "HOSTED",
  "name" : "±DetectUserDirectoriesInImageHeap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When set to true, the image generator verifies that the image heap does not contain a home directory as a substring."
}, {
  "type" : "HOSTED",
  "name" : "DiagnoseDumpLevel",
  "dataType" : "LONG",
  "defaultValue" : 3,
  "description" : "Specify the dump level if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details. file:doc-files/CompilationFailureActionHelp.txt."
}, {
  "type" : "HOSTED",
  "name" : "DiagnosticsDir",
  "dataType" : "STRING",
  "defaultValue" : "reports/diagnostics_20220813_112120",
  "description" : "Sets the dir where diagnostic information is dumped."
}, {
  "type" : "HOSTED",
  "name" : "±DiagnosticsMode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables the diagnostic mode."
}, {
  "type" : "HOSTED",
  "name" : "±DisableIntercept",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Disable intercepting exceptions in debug scopes."
}, {
  "type" : "HOSTED",
  "name" : "DisableIntrinsics",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Disable intrinsics matching the given method filter (see MethodFilter option for details). For example, 'DisableIntrinsicsString.equals' disables intrinsics for any method named 'equals' in a class whose simple name is 'String'. You can append ':verbose' at the end of the filter value to print out disabled intrinsics as they are encountered during compilation (e.g., 'String.equals:verbose')."
}, {
  "type" : "HOSTED",
  "name" : "±DisableTypeIdResultVerification",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "For internal purposes only. Disables type id result verification even when running with assertions enabled."
}, {
  "type" : "HOSTED",
  "name" : "DisableURLProtocols",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "List of comma separated URL protocols that must never be included."
}, {
  "type" : "HOSTED",
  "name" : "±DivertParameterReturningMethod",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return."
}, {
  "type" : "HOSTED",
  "name" : "Dump",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Filter pattern for specifying scopes in which dumping is enabled."
}, {
  "type" : "HOSTED",
  "name" : "±DumpAfterEveryBCI",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Dump the current graph after every bci to IGV."
}, {
  "type" : "HOSTED",
  "name" : "±DumpEndVersusExitLoopFrequencies",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Debug flag to dump loop frequency differences computed based on loop end or exit nodes.If the frequencies diverge a lot, this may indicate missing profiles on control flowinside the loop body."
}, {
  "type" : "HOSTED",
  "name" : "DumpHeap",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Dump the heap at a specific time during image building.The option accepts a list of comma separated phases, any of: during-analysis, after-analysis, before-compilation."
}, {
  "type" : "HOSTED",
  "name" : "±DumpOnError",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Send compiler IR to dump handlers on error."
}, {
  "type" : "HOSTED",
  "name" : "DumpOnPhaseChange",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the simple name of the phase class."
}, {
  "type" : "HOSTED",
  "name" : "DumpPath",
  "dataType" : "STRING",
  "defaultValue" : "graal_dumps",
  "description" : "The directory where various Graal dump files are written."
}, {
  "type" : "HOSTED",
  "name" : "±DumpTargetInfo",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Show native-toolchain information and image-build settings."
}, {
  "type" : "HOSTED",
  "name" : "±DumpThreadStacksOnSignal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Dumps all thread stacktraces on SIGQUIT/SIGBREAK."
}, {
  "type" : "HOSTED",
  "name" : "±DumpingErrorsAreFatal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Treat any exceptions during dumping as fatal."
}, {
  "type" : "HOSTED",
  "name" : "±DynamicCountersPrintGroupSeparator",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use grouping separators for number printing."
}, {
  "type" : "HOSTED",
  "name" : "DynamicProxyConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "One or several (comma-separated) paths to JSON files that specify lists of interfaces that define Java proxy classes."
}, {
  "type" : "HOSTED",
  "name" : "DynamicProxyConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing program elements to be made available for reflection (see ProxyConfigurationFiles)."
}, {
  "type" : "HOSTED",
  "name" : "±DynamicProxyTracing",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable trace logging for dynamic proxy."
}, {
  "type" : "HOSTED",
  "name" : "±EagerSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Eagerly construct extra snippet info."
}, {
  "type" : "HOSTED",
  "name" : "±EarlyCodeEmissionOrder",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable early code emission order computation instead of late code emission order computation."
}, {
  "type" : "HOSTED",
  "name" : "±EarlyGVN",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform early global value numbering."
}, {
  "type" : "HOSTED",
  "name" : "±EarlyLICM",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform early loop invariant code motion."
}, {
  "type" : "HOSTED",
  "name" : "±EmitStringSubstitutions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Emit substitutions for String methods."
}, {
  "type" : "HOSTED",
  "name" : "±EnableAllSecurityServices",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Add all security service classes to the generated image."
}, {
  "type" : "HOSTED",
  "name" : "±EnableLoggingFeature",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable the feature that provides support for logging."
}, {
  "type" : "HOSTED",
  "name" : "±EnableSecurityServicesFeature",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable automatic registration of security services."
}, {
  "type" : "HOSTED",
  "name" : "±EnableSignalAPI",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enables the signal API (sun.misc.Signal or jdk.internal.misc.Signal). Defaults to false for shared library and true for executables."
}, {
  "type" : "HOSTED",
  "name" : "EnableURLProtocols",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "List of comma separated URL protocols to enable."
}, {
  "type" : "HOSTED",
  "name" : "±EnableWildcardExpansion",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable wildcard expansion in command line arguments on Windows."
}, {
  "type" : "HOSTED",
  "name" : "±EnforceMaxRuntimeCompileMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enforce checking of maximum number of methods allowed for runtime compilation. Useful for checking in the gate that the number of methods does not go up without a good reason."
}, {
  "type" : "HOSTED",
  "name" : "EntryPointNamePrefix",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Prefix that is added to the names of entry point methods."
}, {
  "type" : "HOSTED",
  "name" : "EscapeAnalysisIterations",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "EscapeAnalysisLoopCutoff",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "EscapeAnalyzeOnly",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ExactFullUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 800,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ExactPartialUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 200,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ExcludeResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Regexp to match names of resources to be excluded from the image."
}, {
  "type" : "HOSTED",
  "name" : "±ExhaustiveHeapScan",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Scan all objects reachable from roots for analysis. By default false."
}, {
  "type" : "HOSTED",
  "name" : "±ExitAfterAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exit after analysis."
}, {
  "type" : "HOSTED",
  "name" : "±ExitAfterCAPCache",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exit image generation after C Annotation Processor Cache creation."
}, {
  "type" : "HOSTED",
  "name" : "±ExitAfterQueryCodeGeneration",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Output query code for target platform without executing it."
}, {
  "type" : "HOSTED",
  "name" : "±ExitAfterRelocatableImageWrite",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exit after writing relocatable file."
}, {
  "type" : "HOSTED",
  "name" : "±ExitVMOnException",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Alias for CompilationFailureActionExitVM."
}, {
  "type" : "HOSTED",
  "name" : "±ExtendedAsserts",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable extended asserts which slow down analysis."
}, {
  "type" : "HOSTED",
  "name" : "±FailedLoopExplosionIsFatal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Do not bail out but throw an exception on failed loop explosion."
}, {
  "type" : "HOSTED",
  "name" : "FallbackExecutorClasspath",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Internal option used to specify Classpath for FallbackExecutor."
}, {
  "type" : "HOSTED",
  "name" : "FallbackExecutorJavaArg",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Internal option used to specify java arguments for FallbackExecutor."
}, {
  "type" : "HOSTED",
  "name" : "FallbackExecutorMainClass",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Internal option used to specify MainClass for FallbackExecutor."
}, {
  "type" : "HOSTED",
  "name" : "FallbackExecutorSystemProperty",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Internal option used to specify system properties for FallbackExecutor."
}, {
  "type" : "HOSTED",
  "name" : "FallbackThreshold",
  "dataType" : "LONG",
  "defaultValue" : 5,
  "description" : "Define when fallback-image generation should be used."
}, {
  "type" : "HOSTED",
  "name" : "Features",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "A comma-separated list of fully qualified Feature implementation classes."
}, {
  "type" : "HOSTED",
  "name" : "±FloatingDivNodes",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Try to float non-constant division operations to expose global value numbering of divisions."
}, {
  "type" : "HOSTED",
  "name" : "±FoldSecurityManagerGetter",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Fold SecurityManager getter."
}, {
  "type" : "HOSTED",
  "name" : "±ForceAdversarialLayout",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Place N-byte constants in the data section such that they are misaligned with respect to N*2. For example, place 4 byte constants at offset 4, 12 or 20, etc. This layout is used to detect instructions that load constants with alignment smaller than the fetch size. For instance, an XORPS instruction that does a 16-byte fetch of a 4-byte float not aligned to 16 bytes will cause a segfault."
}, {
  "type" : "HOSTED",
  "name" : "±ForceNoROSectionRelocations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use only a writable native image heap (requires ld.gold linker)."
}, {
  "type" : "HOSTED",
  "name" : "±FullUnroll",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "FullUnrollConstantCompareBoost",
  "dataType" : "LONG",
  "defaultValue" : 15,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "FullUnrollMaxApplication",
  "dataType" : "LONG",
  "defaultValue" : 60,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "FullUnrollMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 600,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "FullUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 400,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "GCDebugStartCycle",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Start tracing compiled GC barriers after N garbage collections (disabled if N < 0)."
}, {
  "type" : "HOSTED",
  "name" : "±GatherSafepointStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Gather statistics about each safepoint."
}, {
  "type" : "HOSTED",
  "name" : "±GenLoopSafepoints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "GenerateDebugInfo",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Insert debug info into the generated native image or library."
}, {
  "type" : "HOSTED",
  "name" : "±GenericDynamicCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Turn on the benchmark counters, and displays the results on VM shutdown."
}, {
  "type" : "HOSTED",
  "name" : "±GraalArithmeticStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use Graal arithmetic stubs instead of HotSpot stubs where possible."
}, {
  "type" : "HOSTED",
  "name" : "GraalCompileOnly",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is redirected to a lower tier compiler. The filter format is the same as for the MethodFilter option."
}, {
  "type" : "HOSTED",
  "name" : "GraphCompressionThreshold",
  "dataType" : "LONG",
  "defaultValue" : 70,
  "description" : "Graal graph compression is performed when percent of live nodes falls below this value."
}, {
  "type" : "HOSTED",
  "name" : "±GreyToBlackObjRefDemographics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Develop demographics of the object references visited."
}, {
  "type" : "HOSTED",
  "name" : "GreyToBlackObjectVisitorDiagnosticHistory",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Length of GreyToBlackObjectVisitor history for diagnostics. 0 implies no history is kept."
}, {
  "type" : "HOSTED",
  "name" : "±GuardPriorities",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "HeapChunkHeaderPadding",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Number of bytes at the beginning of each heap chunk that are not used for payload data, i.e., can be freely used as metadata by the heap chunk provider."
}, {
  "type" : "HOSTED",
  "name" : "HeapVerifierVerbosity",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Control heap verifier verbosity level: 0 - quiet, 1 - info, 2 - warning, 3 - all."
}, {
  "type" : "HOSTED",
  "name" : "±HotSpotDeoptExplicitExceptions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Testing only option that forces deopts for exception throws."
}, {
  "type" : "HOSTED",
  "name" : "±HotSpotPostOnExceptions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Testing only option that forces deopts for exception throws."
}, {
  "type" : "HOSTED",
  "name" : "±HotSpotPrintInlining",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print inlining optimizations."
}, {
  "type" : "HOSTED",
  "name" : "±HybridStaticContext",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable hybrid context for static methods, i.e. uses invocation site as context for static methods."
}, {
  "type" : "HOSTED",
  "name" : "ImageBuildStatisticsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File for printing image build statistics."
}, {
  "type" : "HOSTED",
  "name" : "±ImageHeapCardMarking",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Enables card marking for image heap objects, which arranges them in chunks. Automatically enabled when supported."
}, {
  "type" : "HOSTED",
  "name" : "ImageObjectTreeExpandRoots",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Override the default suppression of specified roots. See: Reports.md."
}, {
  "type" : "HOSTED",
  "name" : "ImageObjectTreeExpandTypes",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Override the default suppression of specified types. See: Reports.md."
}, {
  "type" : "HOSTED",
  "name" : "ImageObjectTreeSuppressRoots",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Suppress the expansion of specified roots. See: Reports.md."
}, {
  "type" : "HOSTED",
  "name" : "ImageObjectTreeSuppressTypes",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Suppress the expansion of specified types. See: Reports.md."
}, {
  "type" : "HOSTED",
  "name" : "ImageSymbolsPrefix",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Common prefix used by method symbols in image."
}, {
  "type" : "HOSTED",
  "name" : "±IncludeAllLocales",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Make all hosted locales available at run time."
}, {
  "type" : "HOSTED",
  "name" : "±IncludeAllTimeZones",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When true, all time zones will be pre-initialized in the image."
}, {
  "type" : "HOSTED",
  "name" : "±IncludeDebugHelperMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Determines if debugging-specific helper methods are embedded into the image. Those methods can be called directly from the debugger to obtain or print additional information."
}, {
  "type" : "HOSTED",
  "name" : "IncludeLocales",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma separated list of locales to be included into the image. The default locale is included in the list automatically if not present."
}, {
  "type" : "HOSTED",
  "name" : "±IncludeMethodData",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Include a list of methods included in the image for runtime inspection."
}, {
  "type" : "HOSTED",
  "name" : "±IncludeNodeSourcePositions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track NodeSourcePositions during runtime-compilation."
}, {
  "type" : "HOSTED",
  "name" : "IncludeResourceBundles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma separated list of bundles to be included into the image."
}, {
  "type" : "HOSTED",
  "name" : "IncludeResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Regexp to match names of resources to be included in the image."
}, {
  "type" : "HOSTED",
  "name" : "IncludeTimeZones",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "The time zones, in addition to the default zone of the host, that will be pre-initialized in the image."
}, {
  "type" : "HOSTED",
  "name" : "InitialCollectionPolicy",
  "dataType" : "STRING",
  "defaultValue" : "Adaptive",
  "description" : "The garbage collection policy, either Adaptive (default) or BySpaceAndTime."
}, {
  "type" : "HOSTED",
  "name" : "±Inline",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable inlining."
}, {
  "type" : "HOSTED",
  "name" : "±InlineBeforeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline methods before static analysis."
}, {
  "type" : "HOSTED",
  "name" : "InlineBeforeAnalysisAllowedDepth",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "Maximum number of invokes for method inlined before static analysis."
}, {
  "type" : "HOSTED",
  "name" : "InlineBeforeAnalysisAllowedInvokes",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Maximum number of invokes for method inlined before static analysis."
}, {
  "type" : "HOSTED",
  "name" : "InlineBeforeAnalysisAllowedNodes",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Maximum number of computation nodes for method inlined before static analysis."
}, {
  "type" : "HOSTED",
  "name" : "±InlineDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inlines trivial methods during bytecode parsing."
}, {
  "type" : "HOSTED",
  "name" : "InlineDuringParsingMaxDepth",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Maximum depth when inlining during bytecode parsing."
}, {
  "type" : "HOSTED",
  "name" : "±InlineEverything",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±InlineMegamorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with megamorphic type profile (i.e., not all types could be recorded)."
}, {
  "type" : "HOSTED",
  "name" : "±InlineMonomorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with monomorphic type profile."
}, {
  "type" : "HOSTED",
  "name" : "±InlinePartialIntrinsicExitDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an intrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not support."
}, {
  "type" : "HOSTED",
  "name" : "±InlinePolymorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with polymorphic type profile."
}, {
  "type" : "HOSTED",
  "name" : "±InlineVTableStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "InliningDepthError",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Maximum inlining depth during partial evaluation before reporting an infinite recursion."
}, {
  "type" : "HOSTED",
  "name" : "InspectServerContentPath",
  "dataType" : "STRING",
  "defaultValue" : "inspect",
  "description" : "Path to the contents of the Inspect web server."
}, {
  "type" : "HOSTED",
  "name" : "±InstallExitHandlers",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Provide java.lang.Terminator exit handlers."
}, {
  "type" : "HOSTED",
  "name" : "±InterceptBailout",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Intercept also bailout exceptions."
}, {
  "type" : "HOSTED",
  "name" : "±InternalSymbolsAreGlobal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Compatibility option to make symbols used for the image heap global. Using global symbols is problematic for shared libraries because the loader implicitly changes the value when the symbol is already defined in the executable loading the library. Setting this option to true preserves the broken behavior of old Native Image versions."
}, {
  "type" : "HOSTED",
  "name" : "InternalThreadStackSize",
  "dataType" : "LONG",
  "defaultValue" : 2097152,
  "description" : "The size of each internal thread stack, in bytes."
}, {
  "type" : "HOSTED",
  "name" : "±Intrinsify",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use compiler intrinsifications."
}, {
  "type" : "HOSTED",
  "name" : "IsolatedLoopHeaderAlignment",
  "dataType" : "LONG",
  "defaultValue" : 32,
  "description" : "Alignment in bytes for loop header blocks that have no fall through paths."
}, {
  "type" : "HOSTED",
  "name" : "IterativePeelingLimit",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "Allow iterative peeling of loops up to this many times (each time the peeling phase runs)."
}, {
  "type" : "HOSTED",
  "name" : "±JNI",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable Java Native Interface (JNI) support."
}, {
  "type" : "HOSTED",
  "name" : "JNIConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Files describing program elements to be made accessible via JNI (for syntax, see ReflectionConfigurationFiles)."
}, {
  "type" : "HOSTED",
  "name" : "JNIConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing program elements to be made accessible via JNI (see JNIConfigurationFiles)."
}, {
  "type" : "HOSTED",
  "name" : "±JNIExportSymbols",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Export Invocation API symbols."
}, {
  "type" : "HOSTED",
  "name" : "±JNIVerboseLookupErrors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Report information about known JNI elements when lookup fails."
}, {
  "type" : "HOSTED",
  "name" : "±LIRDynMoveProfileMethod",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dynamic move profiling per method."
}, {
  "type" : "HOSTED",
  "name" : "±LIROptConstantLoadOptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable constant load optimization."
}, {
  "type" : "HOSTED",
  "name" : "±LIROptControlFlowOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LIROptEdgeMoveOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LIROptLSRAEliminateSpillMoves",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable spill move elimination."
}, {
  "type" : "HOSTED",
  "name" : "±LIROptLSRAOptimizeSpillPosition",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable spill position optimization."
}, {
  "type" : "HOSTED",
  "name" : "±LIROptLSStackSlotAllocator",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use linear scan stack slot allocation."
}, {
  "type" : "HOSTED",
  "name" : "±LIROptNullCheckOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LIROptRedundantMoveElimination",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LIROptStackMoveOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LIROptimization",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable LIR level optimizations."
}, {
  "type" : "HOSTED",
  "name" : "±LIRProfileMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables profiling of methods."
}, {
  "type" : "HOSTED",
  "name" : "±LIRProfileMoves",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads (constant to register) or copies (register to register)."
}, {
  "type" : "HOSTED",
  "name" : "±LSRAOptSplitOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "LSRA optimization: Only split but do not reassign."
}, {
  "type" : "HOSTED",
  "name" : "±LSRAOptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable LSRA optimization."
}, {
  "type" : "HOSTED",
  "name" : "LargeArrayThreshold",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The size at or above which an array will be allocated in its own unaligned chunk. 0 implies (AlignedHeapChunkSize / 8)."
}, {
  "type" : "HOSTED",
  "name" : "LimitInlinedInvokes",
  "dataType" : "DOUBLE",
  "defaultValue" : 5.0,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LimitObjectArrayLength",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for that type. The analysis must be heap sensitive."
}, {
  "type" : "HOSTED",
  "name" : "LinkAtBuildTime",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Require types to be fully defined at image build-time. If used without args, all classes in scope of the option are required to be fully defined."
}, {
  "type" : "HOSTED",
  "name" : "LinkAtBuildTimePaths",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Require all types in given class or module-path entries to be fully defined at image build-time."
}, {
  "type" : "HOSTED",
  "name" : "LinkerRPath",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Path passed to the linker as the -rpath (list of comma-separated directories)."
}, {
  "type" : "HOSTED",
  "name" : "±ListCPUFeatures",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Show CPU features specific to the target platform and exit."
}, {
  "type" : "HOSTED",
  "name" : "±ListMetrics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note that this only lists the metrics that were initialized during the VM execution and so will not include metrics for compiler code that is not executed."
}, {
  "type" : "HOSTED",
  "name" : "±LoadExceptionObjectInVM",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception handler."
}, {
  "type" : "HOSTED",
  "name" : "LocalizationCompressBundles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Regular expressions matching which bundles should be compressed."
}, {
  "type" : "HOSTED",
  "name" : "±LocalizationCompressInParallel",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Compress the bundles in parallel."
}, {
  "type" : "HOSTED",
  "name" : "±LocalizationOptimizedMode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Optimize the resource bundle lookup using a simple map."
}, {
  "type" : "HOSTED",
  "name" : "±LocalizationSubstituteLoadLookup",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Store the resource bundle content more efficiently in the fallback mode."
}, {
  "type" : "HOSTED",
  "name" : "Log",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax."
}, {
  "type" : "HOSTED",
  "name" : "LogFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which logging is sent. A %p in the name will be replaced with a string identifying the process, usually the process id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will be replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate id>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err."
}, {
  "type" : "HOSTED",
  "name" : "±LogVerbose",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable more verbose log output when available."
}, {
  "type" : "HOSTED",
  "name" : "LoopExitVsLoopEndFrequencyDiff",
  "dataType" : "DOUBLE",
  "defaultValue" : 1000.0,
  "description" : "Scaling factor of frequency difference computed based on loop ends or exits."
}, {
  "type" : "HOSTED",
  "name" : "LoopHeaderAlignment",
  "dataType" : "LONG",
  "defaultValue" : 16,
  "description" : "Alignment in bytes for loop header blocks."
}, {
  "type" : "HOSTED",
  "name" : "LoopMaxUnswitch",
  "dataType" : "LONG",
  "defaultValue" : 3,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LoopPeeling",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±LoopPredication",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Hoists array bounds checks out of simple loops. This is ignored if SpeculativeGuardMovement is enabled."
}, {
  "type" : "HOSTED",
  "name" : "±LoopPredicationMainPath",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Restricts LoopPredication to only focus on array bounds checks that dominate the back edge of a loop."
}, {
  "type" : "HOSTED",
  "name" : "±LoopUnswitch",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchFrequencyBoost",
  "dataType" : "DOUBLE",
  "defaultValue" : 10.0,
  "description" : "Number of nodes allowed for a loop unswitching per loop frequency. The number of nodes allowed for the unswitching is proportional to the relative frequency of the loop by this constant."
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchFrequencyMaxFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.95,
  "description" : "Maximun value for the frequency factor of an invariant."
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchFrequencyMinFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.05,
  "description" : "Minimum value for the frequency factor of an invariant."
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchMaxIncrease",
  "dataType" : "LONG",
  "defaultValue" : 2000,
  "description" : "Maximum loop unswitching code size increase in nodes."
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchMinSplitFrequency",
  "dataType" : "DOUBLE",
  "defaultValue" : 1.0,
  "description" : "Lower bound for the minimun frequency of an invariant condition to be unswitched."
}, {
  "type" : "HOSTED",
  "name" : "LoopUnswitchTrivial",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Number of nodes allowed for a loop unswitching regardless of the loop frequency."
}, {
  "type" : "HOSTED",
  "name" : "±MatchExpressions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Allow backend to match complex expressions."
}, {
  "type" : "HOSTED",
  "name" : "MaxCallingContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum length of the methods context chains."
}, {
  "type" : "HOSTED",
  "name" : "MaxCallingContextWidth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context depth are different."
}, {
  "type" : "HOSTED",
  "name" : "MaxCompilationProblemsPerAction",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before changing to a less verbose action. This does not apply to the ExitVM action."
}, {
  "type" : "HOSTED",
  "name" : "MaxConstantObjectsPerType",
  "dataType" : "LONG",
  "defaultValue" : 100,
  "description" : "The maximum number of constant objects recorded for each type before merging the constants into one unique constant object per type. The analysis must be heap sensitive. It has a minimum value of 1."
}, {
  "type" : "HOSTED",
  "name" : "MaxDuplicationFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 2.0,
  "description" : "Max amount of extra effort to expend handling irreducible loops. A value < 1 disables support for irreducible loops."
}, {
  "type" : "HOSTED",
  "name" : "MaxHeapContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum length of the context used to model a heap object in addition to the allocation site; used only when ContextSensitiveHeap is enabled."
}, {
  "type" : "HOSTED",
  "name" : "MaxHeapContextWidth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum number of contexts to record for a heap object. It only affects the analysis when the max and min calling context depth are different."
}, {
  "type" : "HOSTED",
  "name" : "MaxInvokesInTrivialMethod",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Maximum number of invokes in a method so that it is considered trivial (for testing only)."
}, {
  "type" : "HOSTED",
  "name" : "MaxNodesInTrivialLeafMethod",
  "dataType" : "LONG",
  "defaultValue" : 40,
  "description" : "Maximum number of nodes in a method so that it is considered trivial, if it does not have any invokes."
}, {
  "type" : "HOSTED",
  "name" : "MaxNodesInTrivialMethod",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "Maximum number of nodes in a method so that it is considered trivial."
}, {
  "type" : "HOSTED",
  "name" : "MaxObjectSetSize",
  "dataType" : "LONG",
  "defaultValue" : 100,
  "description" : "The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type. The analysis must be heap sensitive. It has a minimum value of 1."
}, {
  "type" : "HOSTED",
  "name" : "MaxReachableTypes",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Maximum number of types allowed in the image. Used for tests where small number of types is necessary."
}, {
  "type" : "HOSTED",
  "name" : "MaxRuntimeCompileMethods",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Maximum number of methods allowed for runtime compilation."
}, {
  "type" : "HOSTED",
  "name" : "MaxSurvivorSpaces",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Maximum number of survivor spaces."
}, {
  "type" : "HOSTED",
  "name" : "MaxTemplatesPerSnippet",
  "dataType" : "LONG",
  "defaultValue" : 50,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "MaxUnrolledObjectZeroingStores",
  "dataType" : "LONG",
  "defaultValue" : 8,
  "description" : "Define the maximum number of stores for which the loop that zeroes out objects is unrolled."
}, {
  "type" : "HOSTED",
  "name" : "MaximumDesiredSize",
  "dataType" : "LONG",
  "defaultValue" : 20000,
  "description" : "Maximum desired size of the compiler graph in nodes."
}, {
  "type" : "HOSTED",
  "name" : "MaximumEscapeAnalysisArrayLength",
  "dataType" : "LONG",
  "defaultValue" : 128,
  "description" : "The maximum length of an array that will be escape analyzed."
}, {
  "type" : "HOSTED",
  "name" : "MaximumInliningSize",
  "dataType" : "LONG",
  "defaultValue" : 300,
  "description" : "Inlining is explored up to this number of nodes in the graph for each call site."
}, {
  "type" : "HOSTED",
  "name" : "MaximumLoopExplosionCount",
  "dataType" : "LONG",
  "defaultValue" : 10000,
  "description" : "Max number of loop explosions per method."
}, {
  "type" : "HOSTED",
  "name" : "MaximumRecursiveInlining",
  "dataType" : "LONG",
  "defaultValue" : 5,
  "description" : "Maximum level of recursive inlining."
}, {
  "type" : "HOSTED",
  "name" : "MegamorphicInliningMinMethodProbability",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.33,
  "description" : "Minimum probability for methods to be inlined for megamorphic type profiles."
}, {
  "type" : "HOSTED",
  "name" : "MemUseTrackers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An empty value enables all memory usage trackers unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "Method",
  "dataType" : "STRING",
  "defaultValue" : "main",
  "description" : "Name of the main entry point method. Optional if --shared is used."
}, {
  "type" : "HOSTED",
  "name" : "MethodFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for matching methods. The syntax for a pattern is:."
}, {
  "type" : "HOSTED",
  "name" : "±MethodFilterRootOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Only check MethodFilter against the root method in the context if true, otherwise check all methods."
}, {
  "type" : "HOSTED",
  "name" : "MethodInlineBailoutLimit",
  "dataType" : "LONG",
  "defaultValue" : 5000,
  "description" : "Per-compilation method inlining exploration limit before giving up (use 0 to disable)."
}, {
  "type" : "HOSTED",
  "name" : "MetricsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which metrics are dumped per compilation."
}, {
  "type" : "HOSTED",
  "name" : "MinCallingContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The minimum length of the methods context chains."
}, {
  "type" : "HOSTED",
  "name" : "MinHeapContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The minimum length of the context used to model a heap object in addition to the allocation site; used only when ContextSensitiveHeap is enabled."
}, {
  "type" : "HOSTED",
  "name" : "MinimalBulkZeroingSize",
  "dataType" : "LONG",
  "defaultValue" : 2048,
  "description" : "If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold."
}, {
  "type" : "HOSTED",
  "name" : "MinimalGraphNodeSizeCheckSize",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Minimal size in NodeSize to check the graph size increases of phases."
}, {
  "type" : "HOSTED",
  "name" : "MinimumPeelFrequency",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.35,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "Module",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Module containing the class that contains the main entry point. Optional if --shared is used."
}, {
  "type" : "HOSTED",
  "name" : "±MoveGuardsUpwards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Move guard nodes to earlier places in the dominator tree if all successors of basic block share a common guard condition."
}, {
  "type" : "HOSTED",
  "name" : "±MultiThreaded",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable support for threads and and thread-local variables (disable for single-threaded implementation)."
}, {
  "type" : "HOSTED",
  "name" : "NDCV",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Run level for NoDeadCodeVerifyHandler (0 off, 1 info, 2 verbose, 3 fatal)."
}, {
  "type" : "HOSTED",
  "name" : "Name",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Name of the output file to be generated."
}, {
  "type" : "HOSTED",
  "name" : "±NativeArchitecture",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Overrides CPUFeatures and uses the native architecture, i.e., the architecture of a machine that builds an image. NativeArchitecture takes precedence over CPUFeatures."
}, {
  "type" : "HOSTED",
  "name" : "NativeLinkerOption",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Pass the provided raw option that will be appended to the linker command to produce the final binary. The possible options are platform specific and passed through without any validation."
}, {
  "type" : "HOSTED",
  "name" : "NeverInline",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Pattern for disabling inlining of methods during image generation."
}, {
  "type" : "HOSTED",
  "name" : "±NewCAPCache",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Create a C Annotation Processor Cache. Will erase any previous cache at that same location."
}, {
  "type" : "HOSTED",
  "name" : "±NodeCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Counts the number of instances of each node class."
}, {
  "type" : "HOSTED",
  "name" : "NonFatalIdenticalCompilationSnapshots",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck compilation."
}, {
  "type" : "HOSTED",
  "name" : "NumberOfAnalysisThreads",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "The number of threads to use for analysis during native image generation. The number must be smaller than the NumberOfThreads."
}, {
  "type" : "HOSTED",
  "name" : "NumberOfThreads",
  "dataType" : "LONG",
  "defaultValue" : 12,
  "description" : "The maximum number of threads to use concurrently during native image generation."
}, {
  "type" : "HOSTED",
  "name" : "ObjdumpExecutables",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled. Otherwise, the first existing executable in the list is used."
}, {
  "type" : "HOSTED",
  "name" : "±OmitHotExceptionStacktrace",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OmitInlinedMethodDebugLineInfo",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Omit generation of DebugLineInfo originating from inlined methods."
}, {
  "type" : "HOSTED",
  "name" : "±OptAssumptions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptConvertDeoptsToGuards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptDeoptimizationGrouping",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptDevirtualizeInvokesOptimistically",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptEarlyReadElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptEliminateGuards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptFloatingReads",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptImplicitNullChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptReadElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptScheduleOutOfLoops",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±OptStaticFinalFieldFolding",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Optimize static final fields that get a constant assigned in the class initializer."
}, {
  "type" : "HOSTED",
  "name" : "Optimize",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "Control native-image code optimizations: b - optimize for shortest build time, 0 - no optimizations, 1 - basic optimizations, 2 - aggressive optimizations."
}, {
  "type" : "HOSTED",
  "name" : "PageSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Define PageSize of a machine that runs the image. The default 0 ( same as host machine page size)."
}, {
  "type" : "HOSTED",
  "name" : "±ParseOnce",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "When true, compiler graphs are parsed only once before static analysis. When false, compiler graphs are parsed for static analysis and again for AOT compilation."
}, {
  "type" : "HOSTED",
  "name" : "±ParseRuntimeOptions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Parse and consume standard options and system properties from the command line arguments when the VM is created."
}, {
  "type" : "HOSTED",
  "name" : "±PartialEscapeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±PartialUnroll",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "Path",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Directory of the image file to be generated."
}, {
  "type" : "HOSTED",
  "name" : "±PeelALot",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±PlatformInterfaceCompatibilityMode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable the behavior of old GraalVM versions. When enabled, interfaces not available for the current platform are filtered."
}, {
  "type" : "HOSTED",
  "name" : "PredefinedClassesConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Files describing predefined classes that can be loaded at runtime."
}, {
  "type" : "HOSTED",
  "name" : "PredefinedClassesConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing predefined classes that can be loaded at runtime."
}, {
  "type" : "HOSTED",
  "name" : "±PreserveFramePointer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Saves stack base pointer on the stack on method entry."
}, {
  "type" : "HOSTED",
  "name" : "±PrintAOTCompilation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print logging information during compilation."
}, {
  "type" : "HOSTED",
  "name" : "±PrintAnalysisCallTree",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print analysis call tree, a breadth-first tree reduction of the call graph."
}, {
  "type" : "HOSTED",
  "name" : "PrintAnalysisCallTreeType",
  "dataType" : "STRING",
  "defaultValue" : "TXT",
  "description" : "Change the output format of the analysis call tree, available options are TXT and CSV. See: Reports.md."
}, {
  "type" : "HOSTED",
  "name" : "±PrintAnalysisStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print analysis results statistics."
}, {
  "type" : "HOSTED",
  "name" : "±PrintBackendCFG",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping scheduled HIR, LIR, register allocation and code generation info to the C1Visualizer."
}, {
  "type" : "HOSTED",
  "name" : "±PrintBlockMapping",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping CFG built during initial BciBlockMapping."
}, {
  "type" : "HOSTED",
  "name" : "±PrintCallEdges",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print call edges with other analysis results statistics."
}, {
  "type" : "HOSTED",
  "name" : "PrintCanonicalGraphStringFlavor",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes involving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small structure differences)."
}, {
  "type" : "HOSTED",
  "name" : "±PrintCanonicalGraphStrings",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping canonical text from for graphs."
}, {
  "type" : "HOSTED",
  "name" : "±PrintClassInitialization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Prints class initialization info for all classes detected by analysis."
}, {
  "type" : "HOSTED",
  "name" : "±PrintCompilation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print an informational line to the console for each completed compilation."
}, {
  "type" : "HOSTED",
  "name" : "±PrintFeatures",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print a list of active features."
}, {
  "type" : "HOSTED",
  "name" : "PrintFlags",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug)."
}, {
  "type" : "HOSTED",
  "name" : "PrintFlagsWithExtraHelp",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra help."
}, {
  "type" : "HOSTED",
  "name" : "PrintGraph",
  "dataType" : "STRING",
  "defaultValue" : "File",
  "description" : "Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written."
}, {
  "type" : "HOSTED",
  "name" : "±PrintGraphFile",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Setting to true sets PrintGraphfile, setting to false sets PrintGraphnetwork."
}, {
  "type" : "HOSTED",
  "name" : "PrintGraphHost",
  "dataType" : "STRING",
  "defaultValue" : "127.0.0.1",
  "description" : "Host part of the address to which graphs are dumped."
}, {
  "type" : "HOSTED",
  "name" : "PrintGraphPort",
  "dataType" : "LONG",
  "defaultValue" : 4445,
  "description" : "Port part of the address to which graphs are dumped in binary format."
}, {
  "type" : "HOSTED",
  "name" : "±PrintGraphWithSchedule",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Schedule graphs as they are dumped."
}, {
  "type" : "HOSTED",
  "name" : "±PrintHeapHistogram",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print class statistics of native image heap."
}, {
  "type" : "HOSTED",
  "name" : "±PrintIRWithLIR",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print HIR along side LIR as the latter is generated."
}, {
  "type" : "HOSTED",
  "name" : "±PrintImageElementSizes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the sizes of the elements of the built image."
}, {
  "type" : "HOSTED",
  "name" : "±PrintImageHeapPartitionSizes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the sizes of the native image heap as the image is built."
}, {
  "type" : "HOSTED",
  "name" : "±PrintImageObjectTree",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print image object hierarchy."
}, {
  "type" : "HOSTED",
  "name" : "±PrintJNIMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print JNI methods added to generated image."
}, {
  "type" : "HOSTED",
  "name" : "±PrintLIRWithAssembly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Include the LIR as comments with the final assembly."
}, {
  "type" : "HOSTED",
  "name" : "±PrintMethodHistogram",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print statistics of methods in native image heap."
}, {
  "type" : "HOSTED",
  "name" : "±PrintPointsToStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Report analysis statistics."
}, {
  "type" : "HOSTED",
  "name" : "±PrintProfilingInformation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print profiling information when parsing a method's bytecode."
}, {
  "type" : "HOSTED",
  "name" : "±PrintRestrictHeapAccessPath",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Print path for @RestrictHeapAccess warnings."
}, {
  "type" : "HOSTED",
  "name" : "±PrintRestrictHeapAccessWarnings",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Print warnings for @RestrictHeapAccess annotations."
}, {
  "type" : "HOSTED",
  "name" : "±PrintRuntimeCompileMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print call tree of methods available for runtime compilation."
}, {
  "type" : "HOSTED",
  "name" : "±PrintStaticTruffleBoundaries",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print truffle boundaries found during the analysis."
}, {
  "type" : "HOSTED",
  "name" : "±PrintSynchronizedAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print types used for Java synchronization."
}, {
  "type" : "HOSTED",
  "name" : "±PrintUninterruptibleCalleeDOTGraph",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print (to stderr) a DOT graph of the @Uninterruptible annotations."
}, {
  "type" : "HOSTED",
  "name" : "±PrintUniverse",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print information about classes, methods, and fields that are present in the native image."
}, {
  "type" : "HOSTED",
  "name" : "±PrintUnmodifiedGraphs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Dump a graph even if it has not changed since it was last dumped. Change detection is based on adding and deleting nodes or changing inputs."
}, {
  "type" : "HOSTED",
  "name" : "±ProfileAllocations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable profiling of allocation sites."
}, {
  "type" : "HOSTED",
  "name" : "ProfileAllocationsContext",
  "dataType" : "STRING",
  "defaultValue" : "AllocatingMethod",
  "description" : "Control the naming and granularity of the counters when using ProfileAllocations."
}, {
  "type" : "HOSTED",
  "name" : "±ProfileAnalysisOperations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the progress of the static analysis."
}, {
  "type" : "HOSTED",
  "name" : "±ProfileCompiledMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±ProfileConstantObjects",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the creation of constant objects."
}, {
  "type" : "HOSTED",
  "name" : "±ProfileDeoptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print logging information during object file writing."
}, {
  "type" : "HOSTED",
  "name" : "±ProfileMonitors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable profiling of monitor operations."
}, {
  "type" : "HOSTED",
  "name" : "QueryCodeDir",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Directory where query code for target platform should be output."
}, {
  "type" : "HOSTED",
  "name" : "±RawConditionalElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ReadEliminationMaxLoopVisits",
  "dataType" : "LONG",
  "defaultValue" : 5,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±ReassociateExpressions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Re-associate loop invariants and constants."
}, {
  "type" : "HOSTED",
  "name" : "±ReduceDCE",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Disable optional dead code eliminations."
}, {
  "type" : "HOSTED",
  "name" : "ReflectionConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "One or several (comma-separated) paths to JSON files that specify which program elements should be made available via reflection."
}, {
  "type" : "HOSTED",
  "name" : "ReflectionConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing program elements to be made available for reflection (see ReflectionConfigurationFiles)."
}, {
  "type" : "HOSTED",
  "name" : "±ReflectionPluginTracing",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable trace logging for reflection plugins."
}, {
  "type" : "HOSTED",
  "name" : "RegisterPressure",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated list of registers that register allocation is limited to."
}, {
  "type" : "HOSTED",
  "name" : "±RelaxTypeFlowStateConstraints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Allow a type flow state to contain types not compatible with its declared type."
}, {
  "type" : "HOSTED",
  "name" : "±RemoveNeverExecutedCode",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±RemoveSaturatedTypeFlows",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable the type flow saturation analysis performance optimization."
}, {
  "type" : "HOSTED",
  "name" : "±RemoveUnusedSymbols",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use linker option to prevent unreferenced symbols in image."
}, {
  "type" : "HOSTED",
  "name" : "±ReplaceInputsWithConstantsBasedOnStamps",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "ReportAnalysisForbiddenType",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Report error if <typename>[:<UsageKind>{,<UsageKind>}] is discovered during analysis (valid values for UsageKind: InHeap, Allocated, Reachable)."
}, {
  "type" : "HOSTED",
  "name" : "±ReportExceptionStackTraces",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Show exception stack traces for exceptions during image building.)."
}, {
  "type" : "HOSTED",
  "name" : "±ReportPerformedSubstitutions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Report performed substitutions."
}, {
  "type" : "HOSTED",
  "name" : "±ReportUnsafeOffsetWarnings",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print unsafe operation offset warnings.)."
}, {
  "type" : "HOSTED",
  "name" : "±ReportUnsupportedElementsAtRuntime",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Report usage of unsupported methods and fields at run time when they are accessed the first time, instead of as an error during image building."
}, {
  "type" : "HOSTED",
  "name" : "ResourceConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Files describing Java resources to be included in the image."
}, {
  "type" : "HOSTED",
  "name" : "ResourceConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing Java resources to be included in the image."
}, {
  "type" : "HOSTED",
  "name" : "±ReturnAfterAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Return after analysis."
}, {
  "type" : "HOSTED",
  "name" : "±RunReachabilityHandlersConcurrently",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Run reachability handlers concurrently during analysis."
}, {
  "type" : "HOSTED",
  "name" : "RuntimeAssertions",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Enable or disable Java assert statements at run time."
}, {
  "type" : "HOSTED",
  "name" : "RuntimeCheckedCPUFeatures",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma separated list of CPU features that will be enabled for runtime checks. The native image may check at run time if such features are supported by the target CPU, and can optimize certain operations based on this information. If a feature is not supported at run time, a less optimized variant will be executed. Because of the presence of multiple code variants, enabling runtime features can result in larger executables. To completely turn off runtime checked CPU features, set this option to the empty string. The specific options available are target platform dependent. See --list-cpu-features for feature list. The default values are: AMD64: 'AVX,AVX2'; AArch64: ''."
}, {
  "type" : "HOSTED",
  "name" : "±RuntimeSystemAssertions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable or disable Java system assertions at run time."
}, {
  "type" : "HOSTED",
  "name" : "±ScanObjectsParallel",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Object scanning in parallel."
}, {
  "type" : "HOSTED",
  "name" : "SerializationConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "One or several (comma-separated) paths to JSON files that specify lists of serialization configurations."
}, {
  "type" : "HOSTED",
  "name" : "SerializationConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing program elements to be made available for serialization (see SerializationConfigurationFiles)."
}, {
  "type" : "HOSTED",
  "name" : "SerializationDenyConfigurationFiles",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "One or several (comma-separated) paths to JSON files that specify lists of serialization configurations."
}, {
  "type" : "HOSTED",
  "name" : "SerializationDenyConfigurationResources",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Resources describing program elements that must not be made available for serialization."
}, {
  "type" : "HOSTED",
  "name" : "ServiceLoaderFeatureExcludeServiceProviders",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma-separated list of service providers that should be excluded."
}, {
  "type" : "HOSTED",
  "name" : "ServiceLoaderFeatureExcludeServices",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Comma-separated list of services that should be excluded."
}, {
  "type" : "HOSTED",
  "name" : "±SharedLibrary",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Build shared library."
}, {
  "type" : "HOSTED",
  "name" : "ShowConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "none",
  "description" : "Writes to the VM log information about the compiler configuration selected."
}, {
  "type" : "HOSTED",
  "name" : "±ShowDumpFiles",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the name of each dump file path as it's created."
}, {
  "type" : "HOSTED",
  "name" : "±ShowSubstitutionSourceInfo",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Controls whether the source position information of snippets and method substitutions are exposed to HotSpot. Can be useful when profiling to get more precise position information."
}, {
  "type" : "HOSTED",
  "name" : "±SimpleFastInflatedLocking",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Handle simple cases for inflated monitors in the fast-path."
}, {
  "type" : "HOSTED",
  "name" : "SmallCompiledLowLevelGraphSize",
  "dataType" : "LONG",
  "defaultValue" : 330,
  "description" : "If the previous low-level graph size of the method exceeds the threshold, it is not inlined."
}, {
  "type" : "HOSTED",
  "name" : "±SnippetCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable counters for various paths in snippets."
}, {
  "type" : "HOSTED",
  "name" : "SoftRefLRUPolicyMSPerMB",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Soft references: this number of milliseconds multiplied by the free heap memory in MByte is the time span for which a soft reference will keep its referent alive after its last access."
}, {
  "type" : "HOSTED",
  "name" : "±SourceLevelDebug",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Preserve the local variable information for every Java source line to allow line-by-line stepping in the debugger. Allow the lookup of Java-level method information, e.g., in stack traces."
}, {
  "type" : "HOSTED",
  "name" : "SourceLevelDebugFilter",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Constrain debug info generation to the comma-separated list of package prefixes given to this option."
}, {
  "type" : "HOSTED",
  "name" : "±SpawnIsolates",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Support multiple isolates."
}, {
  "type" : "HOSTED",
  "name" : "SpectrePHTBarriers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1)."
}, {
  "type" : "HOSTED",
  "name" : "±SpectrePHTIndexMasking",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Mask indices to scope access to allocation size after bounds check."
}, {
  "type" : "HOSTED",
  "name" : "±SpeculativeGuardMovement",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Move loop invariant guards (e.g., array bounds checks) out of loops."
}, {
  "type" : "HOSTED",
  "name" : "StackRedZoneSize",
  "dataType" : "LONG",
  "defaultValue" : 8192,
  "description" : "Size (in bytes) of the red zone reserved at the end of the stack. This stack space can only be used by critical VM code and C code, e.g., to report fatal errors."
}, {
  "type" : "HOSTED",
  "name" : "±StackTrace",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Provide method names for stack traces."
}, {
  "type" : "HOSTED",
  "name" : "StackYellowZoneSize",
  "dataType" : "LONG",
  "defaultValue" : 32768,
  "description" : "Size (in bytes) of the yellow zone reserved at the end of the stack. This stack space is reserved for VM use and cannot be used by the application."
}, {
  "type" : "HOSTED",
  "name" : "±StaticExecutable",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Build statically linked executable (requires static libc and zlib)."
}, {
  "type" : "HOSTED",
  "name" : "±StaticExecutableWithDynamicLibC",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Builds a statically linked executable with libc dynamically linked."
}, {
  "type" : "HOSTED",
  "name" : "±StressExplicitExceptionCode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code emitting explicit exception throwing code."
}, {
  "type" : "HOSTED",
  "name" : "±StressInvokeWithExceptionNode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code emitting invokes with explicit exception edges."
}, {
  "type" : "HOSTED",
  "name" : "±StressTestEarlyReads",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code by emitting reads at earliest instead of latest point."
}, {
  "type" : "HOSTED",
  "name" : "±StrictConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Causes unknown attributes in configuration objects to abort the image build instead of emitting a warning."
}, {
  "type" : "HOSTED",
  "name" : "±StrictDeoptInsertionChecks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform checks that guards and deopts aren't introduced in graphs that should handle exceptions explicitly."
}, {
  "type" : "HOSTED",
  "name" : "±StrictQueryCodeCompilation",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use strict checks when performing query code compilation."
}, {
  "type" : "HOSTED",
  "name" : "StringIndexOfConstantLimit",
  "dataType" : "LONG",
  "defaultValue" : 4096,
  "description" : "String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is smaller than this value."
}, {
  "type" : "HOSTED",
  "name" : "SubstrateVirtualThreadsParallelism",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "For internal usage. Instead, use the equivalent property 'jdk.virtualThreadScheduler.parallelism' as specified by JEP 425 Virtual Threads (Project Loom)."
}, {
  "type" : "HOSTED",
  "name" : "±SupportCompileInIsolates",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Support runtime compilation in separate isolates (enable at runtime with option CompileInIsolates)."
}, {
  "type" : "HOSTED",
  "name" : "±SupportContinuations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Support continuations (without requiring a Project Loom JDK)."
}, {
  "type" : "HOSTED",
  "name" : "±SupportJsrBytecodes",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±SupportOSRWithLocks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits mappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in the graph."
}, {
  "type" : "HOSTED",
  "name" : "±SupportPredefinedClasses",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable support for predefining additional classes."
}, {
  "type" : "HOSTED",
  "name" : "±SupportRecurringCallback",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Support a per-thread timer that is called at a specific interval."
}, {
  "type" : "HOSTED",
  "name" : "±SuppressStderr",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Suppress console error output for unittests."
}, {
  "type" : "HOSTED",
  "name" : "±SuppressStdout",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Suppress console normal output for unittests."
}, {
  "type" : "HOSTED",
  "name" : "TargetPlatform",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Selects native-image compilation target (in <OS>-<architecture> format). Defaults to host's OS-architecture pair."
}, {
  "type" : "HOSTED",
  "name" : "TempDirectory",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Directory for temporary files generated during native image generation. If this option is specified, the temporary files are not deleted so that you can inspect them after native image generation."
}, {
  "type" : "HOSTED",
  "name" : "±ThrowUnsafeOffsetErrors",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Throw unsafe operation offset errors.)."
}, {
  "type" : "HOSTED",
  "name" : "Time",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value enables all timers unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "TimedDynamicCounters",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Turn on the benchmark counters, and displays the results every n milliseconds."
}, {
  "type" : "HOSTED",
  "name" : "Timers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all timers unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "TraceBytecodeParserLevel",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame state trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be interleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used to refine tracing to selected methods."
}, {
  "type" : "HOSTED",
  "name" : "TraceClassInitialization",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Comma-separated list of fully-qualified class names that class initialization is traced for."
}, {
  "type" : "HOSTED",
  "name" : "±TraceEscapeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±TraceExceptionHandlerStub",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace execution of stub used to handle an exception thrown by a callee."
}, {
  "type" : "HOSTED",
  "name" : "±TraceInlineDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Traces inlining performed during bytecode parsing."
}, {
  "type" : "HOSTED",
  "name" : "±TraceInlining",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable tracing of inlining decisions."
}, {
  "type" : "HOSTED",
  "name" : "±TraceInliningForStubsAndSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable inlining decision tracing in stubs and snippets."
}, {
  "type" : "HOSTED",
  "name" : "TraceLIRGeneratorLevel",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The trace level for the LIR generator."
}, {
  "type" : "HOSTED",
  "name" : "±TraceLocalizationFeature",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When enabled, localization feature details are printed."
}, {
  "type" : "HOSTED",
  "name" : "±TraceLoggingFeature",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When enabled, logging feature details are printed."
}, {
  "type" : "HOSTED",
  "name" : "TraceMonitorsMethodFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Trace monitor operations in methods whose fully qualified name contains this substring."
}, {
  "type" : "HOSTED",
  "name" : "TraceMonitorsTypeFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Trace monitor operations on objects whose type contains this substring."
}, {
  "type" : "HOSTED",
  "name" : "±TraceNativeToolUsage",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace all native tool invocations as part of image building."
}, {
  "type" : "HOSTED",
  "name" : "TraceObjectInstantiation",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Comma-separated list of fully-qualified class names that object instantiation is traced for."
}, {
  "type" : "HOSTED",
  "name" : "±TraceParserPlugins",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Traces use of plugins during bytecode parsing."
}, {
  "type" : "HOSTED",
  "name" : "±TraceSecurityServices",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable tracing of security services automatic registration."
}, {
  "type" : "HOSTED",
  "name" : "±TraceServiceLoaderFeature",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When enabled, each service loader resource and class will be printed out to standard output."
}, {
  "type" : "HOSTED",
  "name" : "±TraceUnwindStub",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace execution of the stub that routes an exception to a handler in the calling frame."
}, {
  "type" : "HOSTED",
  "name" : "±TraceVMOperations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace VMOperation execution."
}, {
  "type" : "HOSTED",
  "name" : "±TrackAccessChain",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the callers for methods and accessing methods for fields."
}, {
  "type" : "HOSTED",
  "name" : "±TrackInputFlows",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the input for type flows."
}, {
  "type" : "HOSTED",
  "name" : "TrackMemUse",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An empty value enables all memory use trackers unconditionally."
}, {
  "type" : "HOSTED",
  "name" : "±TrackNodeInsertion",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track source stack trace where a node was inserted into the graph."
}, {
  "type" : "HOSTED",
  "name" : "±TrackNodeSourcePosition",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the NodeSourcePosition."
}, {
  "type" : "HOSTED",
  "name" : "±TreatRuntimeCodeInfoReferencesAsWeak",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines if references from runtime-compiled code to Java heap objects should be treated as strong or weak."
}, {
  "type" : "HOSTED",
  "name" : "TrivialInliningSize",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Graphs with less than this number of nodes are trivial and therefore always inlined."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleCheckBlackListedMethods",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Fail if a method known as not suitable for partial evaluation is reachable for runtime compilation."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleCheckBlockListMethods",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Fail if a method known as not suitable for partial evaluation is reachable for runtime compilation."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleCheckFrameImplementation",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enforce that the Truffle runtime provides the only implementation of Frame."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleCheckNeverPartOfCompilation",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Check that CompilerAsserts.neverPartOfCompilation is not reachable for runtime compilation."
}, {
  "type" : "HOSTED",
  "name" : "TruffleCompilerConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration)."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleHostInlining",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Whether Truffle host inlining is enabled."
}, {
  "type" : "HOSTED",
  "name" : "TruffleHostInliningBaseBudget",
  "dataType" : "LONG",
  "defaultValue" : 5000,
  "description" : "Maximum budget for Truffle host inlining for runtime compiled methods."
}, {
  "type" : "HOSTED",
  "name" : "TruffleHostInliningByteCodeInterpreterBudget",
  "dataType" : "LONG",
  "defaultValue" : 100000,
  "description" : "Maximum budget for Truffle host inlining for runtime compiled methods with a BytecodeInterpreterSwitch annotation."
}, {
  "type" : "HOSTED",
  "name" : "TruffleHostInliningMaxExplorationDepth",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Determines the maximum call depth for exploration during host inlining."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleHostInliningPrintExplored",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When logging is activated for this phase enables printing of only explored, but ultimately not inlined call trees."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleInlineDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline trivial methods in Truffle graphs during native image generation."
}, {
  "type" : "HOSTED",
  "name" : "±TruffleMultiThreaded",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable support for Truffle background compilation."
}, {
  "type" : "HOSTED",
  "name" : "±TrufflePropagateCompilationErrors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Propagate Truffle compilation errors."
}, {
  "type" : "HOSTED",
  "name" : "±TrustFinalDefaultFields",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines whether to treat final fields with default values as constant."
}, {
  "type" : "HOSTED",
  "name" : "TypeCheckMaxHints",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "The maximum number of profiled types that will be used when compiling a profiled type check. Note that TypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks."
}, {
  "type" : "HOSTED",
  "name" : "TypeCheckMinProfileHitProbability",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.5,
  "description" : "If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the type check will be compiled without profiling info."
}, {
  "type" : "HOSTED",
  "name" : "TypeFlowSaturationCutoff",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "The maximum number of types recorded in a type flow. -1 indicates no limitation."
}, {
  "type" : "HOSTED",
  "name" : "±UnresolvedIsError",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Report unresolved elements as errors."
}, {
  "type" : "HOSTED",
  "name" : "UnrollMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 16,
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "UnsafeAutomaticSubstitutionsLogLevel",
  "dataType" : "LONG",
  "defaultValue" : 1,
  "description" : "Unsafe automatic substitutions logging level: Disabled0, Basic1, Info2, Debug3.)."
}, {
  "type" : "HOSTED",
  "name" : "±UnsafeOffsetWarningsAreFatal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print unsafe operation offset warnings.)."
}, {
  "type" : "HOSTED",
  "name" : "±UseApplicationCodeSourceLocation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Return the application path as the Class.getProtectionDomain().getCodeSource().getLocation() for all classes that have no explicit ProtectionDomain."
}, {
  "type" : "HOSTED",
  "name" : "±UseBranchesWithin32ByteBoundary",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for more details. If not set explicitly, the default value will be determined according to the CPU model."
}, {
  "type" : "HOSTED",
  "name" : "±UseCAPCache",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Indicate the C Annotation Processor to use previously cached native information when generating C Type information."
}, {
  "type" : "HOSTED",
  "name" : "±UseCalleeSavedRegisters",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use callee saved registers to reduce spilling for low-frequency calls to stubs (if callee saved registers are supported by the architecture)."
}, {
  "type" : "HOSTED",
  "name" : "±UseCompilationStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables CompilationStatistics."
}, {
  "type" : "HOSTED",
  "name" : "±UseCompressedFrameEncodings",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use compressed frame encoding for frames without local values."
}, {
  "type" : "HOSTED",
  "name" : "±UseContainerSupport",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable detection and runtime container configuration support."
}, {
  "type" : "HOSTED",
  "name" : "±UseDedicatedVMOperationThread",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Determines if VM operations should be executed in a dedicated thread."
}, {
  "type" : "HOSTED",
  "name" : "±UseDirectCallTrampolinesALot",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Force many trampolines to be needed for inter-method calls. Normally trampolines are only used when a method destination is outside the range of a pc-relative branch instruction."
}, {
  "type" : "HOSTED",
  "name" : "±UseEpsilonGC",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use a no-op GC."
}, {
  "type" : "HOSTED",
  "name" : "±UseExceptionProbability",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±UseGraalStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code."
}, {
  "type" : "HOSTED",
  "name" : "UseLibC",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Selects the libc implementation to use. Available implementations: glibc, musl, bionic."
}, {
  "type" : "HOSTED",
  "name" : "±UseLoom",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Build with Project Loom JDK."
}, {
  "type" : "HOSTED",
  "name" : "±UseLoopEndFrequencies",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Derive loop frequencies only from backedge frequencies instead of from loop exit frequencies."
}, {
  "type" : "HOSTED",
  "name" : "±UseLoopLimitChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±UseNullRegion",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines if a null region is present between the heap base and the image heap."
}, {
  "type" : "HOSTED",
  "name" : "±UseRememberedSet",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines if a remembered sets is used, which is necessary for collecting the young and old generation independently."
}, {
  "type" : "HOSTED",
  "name" : "±UseSerialGC",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a serial GC."
}, {
  "type" : "HOSTED",
  "name" : "±UseServiceLoaderFeature",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Automatically register services for run-time lookup using ServiceLoader."
}, {
  "type" : "HOSTED",
  "name" : "±UseSnippetGraphCache",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a cache for snippet graphs."
}, {
  "type" : "HOSTED",
  "name" : "±UseSnippetTemplateCache",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a LRU cache for snippet templates."
}, {
  "type" : "HOSTED",
  "name" : "±UseTrappingNullChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use traps for null checks instead of explicit null-checks."
}, {
  "type" : "HOSTED",
  "name" : "±UseTypeCheckHints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "Verify",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyBalancedMonitors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Emit extra code to dynamically check monitor operations are balanced."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyDeoptimizationEntryPoints",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify that all possible deoptimization entry points have been properly compiled and registered in the metadata."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyGraalGraphEdges",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform expensive verification of graph inputs, usages, successors and predecessors."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyGraalGraphs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Verify graphs often during compilation when assertions are turned on."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyGraalPhasesSize",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify before - after relation of the relative, computed, code size of a graph."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyHeap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify the heap before and after each collection."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyHeapAtReturn",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform platform dependent validation of the Java heap at returns."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyKillCFGUnusedNodes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify that there are no new unused nodes when performing killCFG."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyNamingConventions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify naming conventions during image construction."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyPhases",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "HOSTED",
  "name" : "±VerifyReferences",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Verify all object references if VerifyHeap is enabled."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyRememberedSet",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Verify the remembered set if VerifyHeap is enabled."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyTypes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify type states computed by the static analysis at run time. This is useful when diagnosing problems in the static analysis, but reduces peak performance significantly."
}, {
  "type" : "HOSTED",
  "name" : "±VerifyWriteBarriers",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify write barriers."
}, {
  "type" : "HOSTED",
  "name" : "±WarnMissingIntrinsic",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print a warning when a missing intrinsic is seen."
}, {
  "type" : "HOSTED",
  "name" : "±ZapChunks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Fill unused memory chunks with a sentinel value."
}, {
  "type" : "HOSTED",
  "name" : "±ZapConsumedHeapChunks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "After use, Fill memory chunks with a sentinel value."
}, {
  "type" : "HOSTED",
  "name" : "±ZapProducedHeapChunks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Before use, fill memory chunks with a sentinel value."
}, {
  "type" : "HOSTED",
  "name" : "±ZapStackOnMethodEntry",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "ASMInstructionProfiling",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions. Compare with subclasses of Assembler.InstructionCounter."
}, {
  "type" : "RUNTIME",
  "name" : "±AbortOnBenchmarkCounterOverflow",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters."
}, {
  "type" : "RUNTIME",
  "name" : "ActiveProcessorCount",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Overwrites the available number of processors provided by the OS. Any value < 0 means using the processor count from the OS."
}, {
  "type" : "RUNTIME",
  "name" : "AggregatedMetricsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a more human readable format is used. If not specified, metrics are dumped to the console."
}, {
  "type" : "RUNTIME",
  "name" : "±AliasArrayTypeFlows",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Model all array type flows using a unique elements type flow abstraction."
}, {
  "type" : "RUNTIME",
  "name" : "AllocationProfilingThreshold",
  "dataType" : "LONG",
  "defaultValue" : 1048576,
  "description" : "The minimum size in bytes required for printing an allocation profiling entry."
}, {
  "type" : "RUNTIME",
  "name" : "±AllocationSiteSensitiveHeap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site."
}, {
  "type" : "RUNTIME",
  "name" : "±AlwaysInlineIntrinsics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Unconditionally inline intrinsics."
}, {
  "type" : "RUNTIME",
  "name" : "±AlwaysInlineVTableStubs",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "AnalysisContextSensitivity",
  "dataType" : "STRING",
  "defaultValue" : "insens",
  "description" : "Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens (context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive analysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap)."
}, {
  "type" : "RUNTIME",
  "name" : "AnalysisSizeCutoff",
  "dataType" : "LONG",
  "defaultValue" : 8,
  "description" : "The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation."
}, {
  "type" : "RUNTIME",
  "name" : "AnalysisStatisticsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Analysis results statistics file."
}, {
  "type" : "RUNTIME",
  "name" : "ArrayRegionEqualsConstantLimit",
  "dataType" : "LONG",
  "defaultValue" : 4096,
  "description" : "Array region equality checks will be evaluated at compile time if the receiver is a constant and its length is smaller than this value."
}, {
  "type" : "RUNTIME",
  "name" : "±AutomaticReferenceHandling",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines if the reference handling is executed automatically or manually."
}, {
  "type" : "RUNTIME",
  "name" : "±BenchmarkCounterPrintingCutoff",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a cutoff to print only most significant counters."
}, {
  "type" : "RUNTIME",
  "name" : "±BenchmarkCountersDumpDynamic",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Dump dynamic counters."
}, {
  "type" : "RUNTIME",
  "name" : "±BenchmarkCountersDumpStatic",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Dump static counters."
}, {
  "type" : "RUNTIME",
  "name" : "BenchmarkCountersFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human readable format is used. The fields in the CSV format are: category, group, name, value."
}, {
  "type" : "RUNTIME",
  "name" : "BenchmarkDynamicCounters",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Turn on the benchmark counters. The format of this option is:."
}, {
  "type" : "RUNTIME",
  "name" : "±BootstrapInitializeOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Do not compile anything on bootstrap but just initialize the compiler."
}, {
  "type" : "RUNTIME",
  "name" : "BootstrapTimeout",
  "dataType" : "DOUBLE",
  "defaultValue" : 15.0,
  "description" : "Maximum time in minutes to spend bootstrapping (0 to disable this limit)."
}, {
  "type" : "RUNTIME",
  "name" : "BootstrapWatchDogCriticalRateRatio",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.25,
  "description" : "Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables monitoring)."
}, {
  "type" : "RUNTIME",
  "name" : "±CanOmitFrame",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±CanonicalGraphStringsCheckConstants",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exclude virtual nodes when dumping canonical text for graphs."
}, {
  "type" : "RUNTIME",
  "name" : "±CanonicalGraphStringsExcludeVirtuals",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Exclude virtual nodes when dumping canonical text for graphs."
}, {
  "type" : "RUNTIME",
  "name" : "±CanonicalGraphStringsRemoveIdentities",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Attempts to remove object identity hashes when dumping canonical text for graphs."
}, {
  "type" : "RUNTIME",
  "name" : "±ClearMetricsAfterBootstrap",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Clear the debug metrics after bootstrap."
}, {
  "type" : "RUNTIME",
  "name" : "±CollectImageBuildStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Collect information during image build about devirtualized invokes and bytecode exceptions."
}, {
  "type" : "RUNTIME",
  "name" : "±CollectYoungGenerationSeparately",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Determines if a full GC collects the young generation separately or together with the old generation."
}, {
  "type" : "RUNTIME",
  "name" : "±CompilationBailoutAsFailure",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Treat compilation bailouts like compilation failures."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationCountLimit",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit)."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationExcludePhases",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Exclude certain phases from compilation, either unconditionally or with a method filter. Multiple exclusions can be specified separated by ':'. Phase names are matched as substrings, e.g.: CompilationExcludePhasesPartialEscape:LoopA.*,B.foo excludes PartialEscapePhase from all compilations and any phase containing 'Loop' in its name from compilations of all methods in class A and of method B.foo."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationExpirationPeriod",
  "dataType" : "LONG",
  "defaultValue" : 300,
  "description" : "Time limit in seconds before a compilation expires (0 to disable the limit). A non-zero value for this option is doubled if assertions are enabled and quadrupled if DetailedAsserts is true."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationFailureAction",
  "dataType" : "STRING",
  "defaultValue" : "Silent",
  "description" : "Specifies the action to take when compilation fails."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationIsolateAddressSpaceSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Size of the reserved address space of each compilation isolate (0: default for new isolates)."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationWatchDogStackTraceInterval",
  "dataType" : "DOUBLE",
  "defaultValue" : 60.0,
  "description" : "Interval in seconds between a watch dog reporting stack traces for long running compilations."
}, {
  "type" : "RUNTIME",
  "name" : "CompilationWatchDogStartDelay",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.0,
  "description" : "Delay in seconds before watch dog monitoring a compilation (0 disables monitoring)."
}, {
  "type" : "RUNTIME",
  "name" : "±CompileGraalWithC1Only",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "In tiered mode compile Graal and JVMCI using optimized first tier code."
}, {
  "type" : "RUNTIME",
  "name" : "±CompileInIsolates",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Activate runtime compilation in separate isolates (enable support during image build with option SupportCompileInIsolates)."
}, {
  "type" : "RUNTIME",
  "name" : "CompilerConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority is used. To see the set of available configurations, supply the value 'help' to this option."
}, {
  "type" : "RUNTIME",
  "name" : "±ConditionalElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "ConditionalEliminationMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 4,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "Count",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value enables all counters unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "Counters",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables all counters unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "CrashAt",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation crashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout exception and a ':PermanentBailout' suffix will raise a permanent bailout exception."
}, {
  "type" : "RUNTIME",
  "name" : "±DebugStubsAndSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable debug output for stub code generation and snippet preparation."
}, {
  "type" : "RUNTIME",
  "name" : "±DeoptALot",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±DeoptAfterOSR",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of the method."
}, {
  "type" : "RUNTIME",
  "name" : "DeoptsToDisableOptimisticOptimization",
  "dataType" : "LONG",
  "defaultValue" : 40,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±DetailedAsserts",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled."
}, {
  "type" : "RUNTIME",
  "name" : "DiagnoseDumpLevel",
  "dataType" : "LONG",
  "defaultValue" : 3,
  "description" : "Specify the dump level if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details. file:doc-files/CompilationFailureActionHelp.txt."
}, {
  "type" : "RUNTIME",
  "name" : "DiagnosticDetails",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Specifies how many details are printed for certain diagnostic thunks, e.g.: 'DumpThreads:1,DumpRegisters:2'. A value of 1 will result in the maximum amount of information, higher values will print less information. By default, the most detailed output is enabled for all diagnostic thunks. Wildcards (*) are supported in the name of the diagnostic thunk."
}, {
  "type" : "RUNTIME",
  "name" : "±DisableExplicitGC",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Ignore calls to System.gc()."
}, {
  "type" : "RUNTIME",
  "name" : "±DisableIntercept",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Disable intercepting exceptions in debug scopes."
}, {
  "type" : "RUNTIME",
  "name" : "DisableIntrinsics",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Disable intrinsics matching the given method filter (see MethodFilter option for details). For example, 'DisableIntrinsicsString.equals' disables intrinsics for any method named 'equals' in a class whose simple name is 'String'. You can append ':verbose' at the end of the filter value to print out disabled intrinsics as they are encountered during compilation (e.g., 'String.equals:verbose')."
}, {
  "type" : "RUNTIME",
  "name" : "±DivertParameterReturningMethod",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return."
}, {
  "type" : "RUNTIME",
  "name" : "Dump",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Filter pattern for specifying scopes in which dumping is enabled."
}, {
  "type" : "RUNTIME",
  "name" : "±DumpAfterEveryBCI",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Dump the current graph after every bci to IGV."
}, {
  "type" : "RUNTIME",
  "name" : "±DumpEndVersusExitLoopFrequencies",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Debug flag to dump loop frequency differences computed based on loop end or exit nodes.If the frequencies diverge a lot, this may indicate missing profiles on control flowinside the loop body."
}, {
  "type" : "RUNTIME",
  "name" : "±DumpHeapAndExit",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Create a heap dump and exit."
}, {
  "type" : "RUNTIME",
  "name" : "±DumpOnError",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Send compiler IR to dump handlers on error."
}, {
  "type" : "RUNTIME",
  "name" : "DumpOnPhaseChange",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the simple name of the phase class."
}, {
  "type" : "RUNTIME",
  "name" : "DumpPath",
  "dataType" : "STRING",
  "defaultValue" : "graal_dumps",
  "description" : "The directory where various Graal dump files are written."
}, {
  "type" : "RUNTIME",
  "name" : "±DumpingErrorsAreFatal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Treat any exceptions during dumping as fatal."
}, {
  "type" : "RUNTIME",
  "name" : "±DynamicCountersPrintGroupSeparator",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use grouping separators for number printing."
}, {
  "type" : "RUNTIME",
  "name" : "±EagerSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Eagerly construct extra snippet info."
}, {
  "type" : "RUNTIME",
  "name" : "±EarlyCodeEmissionOrder",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable early code emission order computation instead of late code emission order computation."
}, {
  "type" : "RUNTIME",
  "name" : "±EarlyGVN",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform early global value numbering."
}, {
  "type" : "RUNTIME",
  "name" : "±EarlyLICM",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform early loop invariant code motion."
}, {
  "type" : "RUNTIME",
  "name" : "±EmitStringSubstitutions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Emit substitutions for String methods."
}, {
  "type" : "RUNTIME",
  "name" : "±EnableSignalHandling",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enables signal handling."
}, {
  "type" : "RUNTIME",
  "name" : "EscapeAnalysisIterations",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "EscapeAnalysisLoopCutoff",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "EscapeAnalyzeOnly",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "ExactFullUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 800,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "ExactPartialUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 200,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±ExhaustiveHeapScan",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Scan all objects reachable from roots for analysis. By default false."
}, {
  "type" : "RUNTIME",
  "name" : "±ExitOnOutOfMemoryError",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Exit on the first occurrence of an out-of-memory error that is thrown because the Java heap is out of memory."
}, {
  "type" : "RUNTIME",
  "name" : "±ExitVMOnException",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Alias for CompilationFailureActionExitVM."
}, {
  "type" : "RUNTIME",
  "name" : "±ExtendedAsserts",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable extended asserts which slow down analysis."
}, {
  "type" : "RUNTIME",
  "name" : "±FailedLoopExplosionIsFatal",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Do not bail out but throw an exception on failed loop explosion."
}, {
  "type" : "RUNTIME",
  "name" : "FallbackExecutorRuntimeJavaArg",
  "dataType" : "STRING",
  "defaultValue" : "<string>*",
  "description" : "Internal option used to specify runtime java arguments for FallbackExecutor."
}, {
  "type" : "RUNTIME",
  "name" : "±FlightRecorder",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable Java Flight Recorder."
}, {
  "type" : "RUNTIME",
  "name" : "FlightRecorderLogging",
  "dataType" : "STRING",
  "defaultValue" : "allwarning",
  "description" : "Usage: -XX:FlightRecorderLogging[tag1[+tag2...][*][level][,...]]."
}, {
  "type" : "RUNTIME",
  "name" : "±FloatingDivNodes",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Try to float non-constant division operations to expose global value numbering of divisions."
}, {
  "type" : "RUNTIME",
  "name" : "±ForceAdversarialLayout",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Place N-byte constants in the data section such that they are misaligned with respect to N*2. For example, place 4 byte constants at offset 4, 12 or 20, etc. This layout is used to detect instructions that load constants with alignment smaller than the fetch size. For instance, an XORPS instruction that does a 16-byte fetch of a 4-byte float not aligned to 16 bytes will cause a segfault."
}, {
  "type" : "RUNTIME",
  "name" : "±ForceDumpGraphsBeforeCompilation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Force-dump graphs before compilation."
}, {
  "type" : "RUNTIME",
  "name" : "±FullUnroll",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "FullUnrollConstantCompareBoost",
  "dataType" : "LONG",
  "defaultValue" : 15,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "FullUnrollMaxApplication",
  "dataType" : "LONG",
  "defaultValue" : 60,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "FullUnrollMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 600,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "FullUnrollMaxNodes",
  "dataType" : "LONG",
  "defaultValue" : 400,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "GCDebugStartCycle",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Start tracing compiled GC barriers after N garbage collections (disabled if N < 0)."
}, {
  "type" : "RUNTIME",
  "name" : "±GenLoopSafepoints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±GenericDynamicCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Turn on the benchmark counters, and displays the results on VM shutdown."
}, {
  "type" : "RUNTIME",
  "name" : "±GraalArithmeticStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use Graal arithmetic stubs instead of HotSpot stubs where possible."
}, {
  "type" : "RUNTIME",
  "name" : "GraalCompileOnly",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is redirected to a lower tier compiler. The filter format is the same as for the MethodFilter option."
}, {
  "type" : "RUNTIME",
  "name" : "GraphCompressionThreshold",
  "dataType" : "LONG",
  "defaultValue" : 70,
  "description" : "Graal graph compression is performed when percent of live nodes falls below this value."
}, {
  "type" : "RUNTIME",
  "name" : "±GuardPriorities",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "HeapVerifierVerbosity",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Control heap verifier verbosity level: 0 - quiet, 1 - info, 2 - warning, 3 - all."
}, {
  "type" : "RUNTIME",
  "name" : "±HotSpotDeoptExplicitExceptions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Testing only option that forces deopts for exception throws."
}, {
  "type" : "RUNTIME",
  "name" : "±HotSpotPostOnExceptions",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Testing only option that forces deopts for exception throws."
}, {
  "type" : "RUNTIME",
  "name" : "±HotSpotPrintInlining",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print inlining optimizations."
}, {
  "type" : "RUNTIME",
  "name" : "±HybridStaticContext",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable hybrid context for static methods, i.e. uses invocation site as context for static methods."
}, {
  "type" : "RUNTIME",
  "name" : "ImageBuildStatisticsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File for printing image build statistics."
}, {
  "type" : "RUNTIME",
  "name" : "ImageObjectTreeExpandRoots",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Override the default suppression of specified roots. See: Reports.md."
}, {
  "type" : "RUNTIME",
  "name" : "ImageObjectTreeExpandTypes",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Override the default suppression of specified types. See: Reports.md."
}, {
  "type" : "RUNTIME",
  "name" : "ImageObjectTreeSuppressRoots",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Suppress the expansion of specified roots. See: Reports.md."
}, {
  "type" : "RUNTIME",
  "name" : "ImageObjectTreeSuppressTypes",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Suppress the expansion of specified types. See: Reports.md."
}, {
  "type" : "RUNTIME",
  "name" : "±Inline",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable inlining."
}, {
  "type" : "RUNTIME",
  "name" : "±InlineBeforeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline methods before static analysis."
}, {
  "type" : "RUNTIME",
  "name" : "±InlineDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inlines trivial methods during bytecode parsing."
}, {
  "type" : "RUNTIME",
  "name" : "InlineDuringParsingMaxDepth",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Maximum depth when inlining during bytecode parsing."
}, {
  "type" : "RUNTIME",
  "name" : "±InlineEverything",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±InlineMegamorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with megamorphic type profile (i.e., not all types could be recorded)."
}, {
  "type" : "RUNTIME",
  "name" : "±InlineMonomorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with monomorphic type profile."
}, {
  "type" : "RUNTIME",
  "name" : "±InlinePartialIntrinsicExitDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an intrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not support."
}, {
  "type" : "RUNTIME",
  "name" : "±InlinePolymorphicCalls",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Inline calls with polymorphic type profile."
}, {
  "type" : "RUNTIME",
  "name" : "±InlineVTableStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "InliningDepthError",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Maximum inlining depth during partial evaluation before reporting an infinite recursion."
}, {
  "type" : "RUNTIME",
  "name" : "InspectServerContentPath",
  "dataType" : "STRING",
  "defaultValue" : "inspect",
  "description" : "Path to the contents of the Inspect web server."
}, {
  "type" : "RUNTIME",
  "name" : "±InstallSegfaultHandler",
  "dataType" : "STRING",
  "defaultValue" : "enabled",
  "description" : "Install segfault handler that prints register contents and full Java stacktrace."
}, {
  "type" : "RUNTIME",
  "name" : "±InterceptBailout",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Intercept also bailout exceptions."
}, {
  "type" : "RUNTIME",
  "name" : "±Intrinsify",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use compiler intrinsifications."
}, {
  "type" : "RUNTIME",
  "name" : "IsolatedLoopHeaderAlignment",
  "dataType" : "LONG",
  "defaultValue" : 32,
  "description" : "Alignment in bytes for loop header blocks that have no fall through paths."
}, {
  "type" : "RUNTIME",
  "name" : "IterativePeelingLimit",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "Allow iterative peeling of loops up to this many times (each time the peeling phase runs)."
}, {
  "type" : "RUNTIME",
  "name" : "±LIRDynMoveProfileMethod",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dynamic move profiling per method."
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptConstantLoadOptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable constant load optimization."
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptControlFlowOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptEdgeMoveOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptLSRAEliminateSpillMoves",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable spill move elimination."
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptLSRAOptimizeSpillPosition",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable spill position optimization."
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptLSStackSlotAllocator",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use linear scan stack slot allocation."
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptNullCheckOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptRedundantMoveElimination",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptStackMoveOptimizer",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LIROptimization",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable LIR level optimizations."
}, {
  "type" : "RUNTIME",
  "name" : "±LIRProfileMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables profiling of methods."
}, {
  "type" : "RUNTIME",
  "name" : "±LIRProfileMoves",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads (constant to register) or copies (register to register)."
}, {
  "type" : "RUNTIME",
  "name" : "±LSRAOptSplitOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "LSRA optimization: Only split but do not reassign."
}, {
  "type" : "RUNTIME",
  "name" : "±LSRAOptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable LSRA optimization."
}, {
  "type" : "RUNTIME",
  "name" : "LimitInlinedInvokes",
  "dataType" : "DOUBLE",
  "defaultValue" : 5.0,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LimitObjectArrayLength",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for that type. The analysis must be heap sensitive."
}, {
  "type" : "RUNTIME",
  "name" : "±ListMetrics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note that this only lists the metrics that were initialized during the VM execution and so will not include metrics for compiler code that is not executed."
}, {
  "type" : "RUNTIME",
  "name" : "±LoadExceptionObjectInVM",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception handler."
}, {
  "type" : "RUNTIME",
  "name" : "Log",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax."
}, {
  "type" : "RUNTIME",
  "name" : "LogFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which logging is sent. A %p in the name will be replaced with a string identifying the process, usually the process id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will be replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate id>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err."
}, {
  "type" : "RUNTIME",
  "name" : "±LogVerbose",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable more verbose log output when available."
}, {
  "type" : "RUNTIME",
  "name" : "LoopExitVsLoopEndFrequencyDiff",
  "dataType" : "DOUBLE",
  "defaultValue" : 1000.0,
  "description" : "Scaling factor of frequency difference computed based on loop ends or exits."
}, {
  "type" : "RUNTIME",
  "name" : "LoopHeaderAlignment",
  "dataType" : "LONG",
  "defaultValue" : 16,
  "description" : "Alignment in bytes for loop header blocks."
}, {
  "type" : "RUNTIME",
  "name" : "LoopMaxUnswitch",
  "dataType" : "LONG",
  "defaultValue" : 3,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LoopOnFatalError",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Execute an endless loop before printing diagnostics for a fatal error."
}, {
  "type" : "RUNTIME",
  "name" : "±LoopPeeling",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±LoopPredication",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Hoists array bounds checks out of simple loops. This is ignored if SpeculativeGuardMovement is enabled."
}, {
  "type" : "RUNTIME",
  "name" : "±LoopPredicationMainPath",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Restricts LoopPredication to only focus on array bounds checks that dominate the back edge of a loop."
}, {
  "type" : "RUNTIME",
  "name" : "±LoopUnswitch",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchFrequencyBoost",
  "dataType" : "DOUBLE",
  "defaultValue" : 10.0,
  "description" : "Number of nodes allowed for a loop unswitching per loop frequency. The number of nodes allowed for the unswitching is proportional to the relative frequency of the loop by this constant."
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchFrequencyMaxFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.95,
  "description" : "Maximun value for the frequency factor of an invariant."
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchFrequencyMinFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.05,
  "description" : "Minimum value for the frequency factor of an invariant."
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchMaxIncrease",
  "dataType" : "LONG",
  "defaultValue" : 2000,
  "description" : "Maximum loop unswitching code size increase in nodes."
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchMinSplitFrequency",
  "dataType" : "DOUBLE",
  "defaultValue" : 1.0,
  "description" : "Lower bound for the minimun frequency of an invariant condition to be unswitched."
}, {
  "type" : "RUNTIME",
  "name" : "LoopUnswitchTrivial",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Number of nodes allowed for a loop unswitching regardless of the loop frequency."
}, {
  "type" : "RUNTIME",
  "name" : "±MatchExpressions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Allow backend to match complex expressions."
}, {
  "type" : "RUNTIME",
  "name" : "MaxCallingContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum length of the methods context chains."
}, {
  "type" : "RUNTIME",
  "name" : "MaxCallingContextWidth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context depth are different."
}, {
  "type" : "RUNTIME",
  "name" : "MaxCompilationProblemsPerAction",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before changing to a less verbose action. This does not apply to the ExitVM action."
}, {
  "type" : "RUNTIME",
  "name" : "MaxConstantObjectsPerType",
  "dataType" : "LONG",
  "defaultValue" : 100,
  "description" : "The maximum number of constant objects recorded for each type before merging the constants into one unique constant object per type. The analysis must be heap sensitive. It has a minimum value of 1."
}, {
  "type" : "RUNTIME",
  "name" : "MaxDirectMemorySize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Maximum total size of NIO direct-buffer allocations."
}, {
  "type" : "RUNTIME",
  "name" : "MaxDuplicationFactor",
  "dataType" : "DOUBLE",
  "defaultValue" : 2.0,
  "description" : "Max amount of extra effort to expend handling irreducible loops. A value < 1 disables support for irreducible loops."
}, {
  "type" : "RUNTIME",
  "name" : "MaxHeapContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum length of the context used to model a heap object in addition to the allocation site; used only when ContextSensitiveHeap is enabled."
}, {
  "type" : "RUNTIME",
  "name" : "MaxHeapContextWidth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum number of contexts to record for a heap object. It only affects the analysis when the max and min calling context depth are different."
}, {
  "type" : "RUNTIME",
  "name" : "MaxHeapFree",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum free bytes reserved for allocations, in bytes (0 for automatic according to GC policy)."
}, {
  "type" : "RUNTIME",
  "name" : "MaxHeapSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum heap size at run-time, in bytes."
}, {
  "type" : "RUNTIME",
  "name" : "MaxJavaStackTraceDepth",
  "dataType" : "LONG",
  "defaultValue" : 1024,
  "description" : "The maximum number of lines in the stack trace for Java exceptions (0 means all)."
}, {
  "type" : "RUNTIME",
  "name" : "MaxNewSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The maximum size of the young generation at run-time, in bytes."
}, {
  "type" : "RUNTIME",
  "name" : "MaxObjectSetSize",
  "dataType" : "LONG",
  "defaultValue" : 100,
  "description" : "The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type. The analysis must be heap sensitive. It has a minimum value of 1."
}, {
  "type" : "RUNTIME",
  "name" : "MaxTemplatesPerSnippet",
  "dataType" : "LONG",
  "defaultValue" : 50,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "MaximumDesiredSize",
  "dataType" : "LONG",
  "defaultValue" : 20000,
  "description" : "Maximum desired size of the compiler graph in nodes."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumEscapeAnalysisArrayLength",
  "dataType" : "LONG",
  "defaultValue" : 128,
  "description" : "The maximum length of an array that will be escape analyzed."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumHeapSizePercent",
  "dataType" : "LONG",
  "defaultValue" : 80,
  "description" : "The maximum heap size as percent of physical memory."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumInliningSize",
  "dataType" : "LONG",
  "defaultValue" : 300,
  "description" : "Inlining is explored up to this number of nodes in the graph for each call site."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumLoopExplosionCount",
  "dataType" : "LONG",
  "defaultValue" : 10000,
  "description" : "Max number of loop explosions per method."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumRecursiveInlining",
  "dataType" : "LONG",
  "defaultValue" : 5,
  "description" : "Maximum level of recursive inlining."
}, {
  "type" : "RUNTIME",
  "name" : "MaximumYoungGenerationSizePercent",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "The maximum size of the young generation as a percentage of the maximum heap size."
}, {
  "type" : "RUNTIME",
  "name" : "MegamorphicInliningMinMethodProbability",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.33,
  "description" : "Minimum probability for methods to be inlined for megamorphic type profiles."
}, {
  "type" : "RUNTIME",
  "name" : "MemUseTrackers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An empty value enables all memory usage trackers unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "MethodFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for matching methods. The syntax for a pattern is:."
}, {
  "type" : "RUNTIME",
  "name" : "±MethodFilterRootOnly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Only check MethodFilter against the root method in the context if true, otherwise check all methods."
}, {
  "type" : "RUNTIME",
  "name" : "MethodInlineBailoutLimit",
  "dataType" : "LONG",
  "defaultValue" : 5000,
  "description" : "Per-compilation method inlining exploration limit before giving up (use 0 to disable)."
}, {
  "type" : "RUNTIME",
  "name" : "MetricsFile",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "File to which metrics are dumped per compilation."
}, {
  "type" : "RUNTIME",
  "name" : "MinCallingContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The minimum length of the methods context chains."
}, {
  "type" : "RUNTIME",
  "name" : "MinHeapContextDepth",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The minimum length of the context used to model a heap object in addition to the allocation site; used only when ContextSensitiveHeap is enabled."
}, {
  "type" : "RUNTIME",
  "name" : "MinHeapSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The minimum heap size at run-time, in bytes."
}, {
  "type" : "RUNTIME",
  "name" : "MinimalBulkZeroingSize",
  "dataType" : "LONG",
  "defaultValue" : 2048,
  "description" : "If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold."
}, {
  "type" : "RUNTIME",
  "name" : "MinimalGraphNodeSizeCheckSize",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Minimal size in NodeSize to check the graph size increases of phases."
}, {
  "type" : "RUNTIME",
  "name" : "MinimumPeelFrequency",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.35,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±MoveGuardsUpwards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Move guard nodes to earlier places in the dominator tree if all successors of basic block share a common guard condition."
}, {
  "type" : "RUNTIME",
  "name" : "NDCV",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Run level for NoDeadCodeVerifyHandler (0 off, 1 info, 2 verbose, 3 fatal)."
}, {
  "type" : "RUNTIME",
  "name" : "±NodeCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Counts the number of instances of each node class."
}, {
  "type" : "RUNTIME",
  "name" : "NonFatalIdenticalCompilationSnapshots",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck compilation."
}, {
  "type" : "RUNTIME",
  "name" : "ObjdumpExecutables",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled. Otherwise, the first existing executable in the list is used."
}, {
  "type" : "RUNTIME",
  "name" : "±OmitHotExceptionStacktrace",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptAssumptions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptConvertDeoptsToGuards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptDeoptimizationGrouping",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptDevirtualizeInvokesOptimistically",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptEarlyReadElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptEliminateGuards",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptFloatingReads",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptImplicitNullChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptReadElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±OptScheduleOutOfLoops",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±PartialEscapeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±PartialUnroll",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±PeelALot",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "PercentTimeInIncrementalCollection",
  "dataType" : "LONG",
  "defaultValue" : 50,
  "description" : "Percentage of total collection time that should be spent on young generation collections."
}, {
  "type" : "RUNTIME",
  "name" : "±PreferContainerQuotaForCPUCount",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Calculate the container CPU availability based on the value of quotas (if set), when true. Otherwise, use the CPU shares value, provided it is less than quota."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintAnalysisCallTree",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print analysis call tree, a breadth-first tree reduction of the call graph."
}, {
  "type" : "RUNTIME",
  "name" : "PrintAnalysisCallTreeType",
  "dataType" : "STRING",
  "defaultValue" : "TXT",
  "description" : "Change the output format of the analysis call tree, available options are TXT and CSV. See: Reports.md."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintAnalysisStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print analysis results statistics."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintBackendCFG",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping scheduled HIR, LIR, register allocation and code generation info to the C1Visualizer."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintBlockMapping",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping CFG built during initial BciBlockMapping."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintCallEdges",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print call edges with other analysis results statistics."
}, {
  "type" : "RUNTIME",
  "name" : "PrintCanonicalGraphStringFlavor",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes involving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small structure differences)."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintCanonicalGraphStrings",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable dumping canonical text from for graphs."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintCompilation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print an informational line to the console for each completed compilation."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintDetailedAllocationProfiling",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Print detailed information for each allocation site."
}, {
  "type" : "RUNTIME",
  "name" : "PrintFlags",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug)."
}, {
  "type" : "RUNTIME",
  "name" : "PrintFlagsWithExtraHelp",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra help."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGC",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print summary GC information after each collection."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGCSummary",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print summary GC information after application main method returns."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGCTimeStamps",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print a time stamp at each collection, if +PrintGC or +VerboseGC."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGCTimes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the time for each of the phases of each collection, if +VerboseGC."
}, {
  "type" : "RUNTIME",
  "name" : "PrintGraph",
  "dataType" : "STRING",
  "defaultValue" : "File",
  "description" : "Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGraphFile",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Setting to true sets PrintGraphfile, setting to false sets PrintGraphnetwork."
}, {
  "type" : "RUNTIME",
  "name" : "PrintGraphHost",
  "dataType" : "STRING",
  "defaultValue" : "127.0.0.1",
  "description" : "Host part of the address to which graphs are dumped."
}, {
  "type" : "RUNTIME",
  "name" : "PrintGraphPort",
  "dataType" : "LONG",
  "defaultValue" : 4445,
  "description" : "Port part of the address to which graphs are dumped in binary format."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintGraphWithSchedule",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Schedule graphs as they are dumped."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintHeapShape",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the shape of the heap before and after each collection, if +VerboseGC."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintIRWithLIR",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print HIR along side LIR as the latter is generated."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintImageObjectTree",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print image object hierarchy."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintLIRWithAssembly",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Include the LIR as comments with the final assembly."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintPointsToStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Report analysis statistics."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintProfilingInformation",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print profiling information when parsing a method's bytecode."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintSynchronizedAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print types used for Java synchronization."
}, {
  "type" : "RUNTIME",
  "name" : "±PrintUnmodifiedGraphs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Dump a graph even if it has not changed since it was last dumped. Change detection is based on adding and deleting nodes or changing inputs."
}, {
  "type" : "RUNTIME",
  "name" : "±ProfileAllocations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable profiling of allocation sites."
}, {
  "type" : "RUNTIME",
  "name" : "ProfileAllocationsContext",
  "dataType" : "STRING",
  "defaultValue" : "AllocatingMethod",
  "description" : "Control the naming and granularity of the counters when using ProfileAllocations."
}, {
  "type" : "RUNTIME",
  "name" : "±ProfileAnalysisOperations",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the progress of the static analysis."
}, {
  "type" : "RUNTIME",
  "name" : "±ProfileCompiledMethods",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±ProfileConstantObjects",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the creation of constant objects."
}, {
  "type" : "RUNTIME",
  "name" : "±ProfileMonitors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable profiling of monitor operations."
}, {
  "type" : "RUNTIME",
  "name" : "±RawConditionalElimination",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "ReadEliminationMaxLoopVisits",
  "dataType" : "LONG",
  "defaultValue" : 5,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±ReassociateExpressions",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Re-associate loop invariants and constants."
}, {
  "type" : "RUNTIME",
  "name" : "±ReduceDCE",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Disable optional dead code eliminations."
}, {
  "type" : "RUNTIME",
  "name" : "RegisterPressure",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated list of registers that register allocation is limited to."
}, {
  "type" : "RUNTIME",
  "name" : "±RelaxTypeFlowStateConstraints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Allow a type flow state to contain types not compatible with its declared type."
}, {
  "type" : "RUNTIME",
  "name" : "±RemoveNeverExecutedCode",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±RemoveSaturatedTypeFlows",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Enable the type flow saturation analysis performance optimization."
}, {
  "type" : "RUNTIME",
  "name" : "±ReplaceInputsWithConstantsBasedOnStamps",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "SafepointPromptnessFailureNanos",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Exit the VM if I can not come to a safepoint in this many nanoseconds. 0 implies forever."
}, {
  "type" : "RUNTIME",
  "name" : "SafepointPromptnessWarningNanos",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "Print a warning if I can not come to a safepoint in this many nanoseconds. 0 implies forever."
}, {
  "type" : "RUNTIME",
  "name" : "±SamplingBasedProfiling",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Allow sampling-based profiling. Default: disabled in execution."
}, {
  "type" : "RUNTIME",
  "name" : "±ScanObjectsParallel",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Object scanning in parallel."
}, {
  "type" : "RUNTIME",
  "name" : "ShowConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "none",
  "description" : "Writes to the VM log information about the compiler configuration selected."
}, {
  "type" : "RUNTIME",
  "name" : "±ShowDumpFiles",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print the name of each dump file path as it's created."
}, {
  "type" : "RUNTIME",
  "name" : "±ShowSubstitutionSourceInfo",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Controls whether the source position information of snippets and method substitutions are exposed to HotSpot. Can be useful when profiling to get more precise position information."
}, {
  "type" : "RUNTIME",
  "name" : "±SimpleFastInflatedLocking",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Handle simple cases for inflated monitors in the fast-path."
}, {
  "type" : "RUNTIME",
  "name" : "SmallCompiledLowLevelGraphSize",
  "dataType" : "LONG",
  "defaultValue" : 330,
  "description" : "If the previous low-level graph size of the method exceeds the threshold, it is not inlined."
}, {
  "type" : "RUNTIME",
  "name" : "±SnippetCounters",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable counters for various paths in snippets."
}, {
  "type" : "RUNTIME",
  "name" : "SpectrePHTBarriers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1)."
}, {
  "type" : "RUNTIME",
  "name" : "±SpectrePHTIndexMasking",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Mask indices to scope access to allocation size after bounds check."
}, {
  "type" : "RUNTIME",
  "name" : "±SpeculativeGuardMovement",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Move loop invariant guards (e.g., array bounds checks) out of loops."
}, {
  "type" : "RUNTIME",
  "name" : "StackSize",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The size of each thread stack at run-time, in bytes."
}, {
  "type" : "RUNTIME",
  "name" : "StartFlightRecording",
  "dataType" : "STRING",
  "defaultValue" : "",
  "description" : "Start flight recording with options."
}, {
  "type" : "RUNTIME",
  "name" : "±StressExplicitExceptionCode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code emitting explicit exception throwing code."
}, {
  "type" : "RUNTIME",
  "name" : "±StressInvokeWithExceptionNode",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code emitting invokes with explicit exception edges."
}, {
  "type" : "RUNTIME",
  "name" : "±StressTestEarlyReads",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Stress the code by emitting reads at earliest instead of latest point."
}, {
  "type" : "RUNTIME",
  "name" : "±StrictDeoptInsertionChecks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform checks that guards and deopts aren't introduced in graphs that should handle exceptions explicitly."
}, {
  "type" : "RUNTIME",
  "name" : "StringIndexOfConstantLimit",
  "dataType" : "LONG",
  "defaultValue" : 4096,
  "description" : "String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is smaller than this value."
}, {
  "type" : "RUNTIME",
  "name" : "±SupportJsrBytecodes",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±SupportOSRWithLocks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits mappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in the graph."
}, {
  "type" : "RUNTIME",
  "name" : "TearDownFailureNanos",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The number of nanoseconds before tearing down an isolate gives a failure message. 0 implies no message."
}, {
  "type" : "RUNTIME",
  "name" : "TearDownWarningNanos",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The number of nanoseconds before and between which tearing down an isolate gives a warning message. 0 implies no warning."
}, {
  "type" : "RUNTIME",
  "name" : "Time",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value enables all timers unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "TimedDynamicCounters",
  "dataType" : "LONG",
  "defaultValue" : -1,
  "description" : "Turn on the benchmark counters, and displays the results every n milliseconds."
}, {
  "type" : "RUNTIME",
  "name" : "Timers",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all timers unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "TraceBytecodeParserLevel",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame state trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be interleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used to refine tracing to selected methods."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceCodeCache",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print logging information for runtime code cache modifications."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceDeoptimization",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print logging information for every deoptimization."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceDeoptimizationDetails",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print verbose logging information for every deoptimization."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceEscapeAnalysis",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±TraceExceptionHandlerStub",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace execution of stub used to handle an exception thrown by a callee."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceHeapChunks",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace heap chunks during collections, if +VerboseGC and +PrintHeapShape."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceInlineDuringParsing",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Traces inlining performed during bytecode parsing."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceInlining",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable tracing of inlining decisions."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceInliningForStubsAndSnippets",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enable inlining decision tracing in stubs and snippets."
}, {
  "type" : "RUNTIME",
  "name" : "TraceLIRGeneratorLevel",
  "dataType" : "LONG",
  "defaultValue" : 0,
  "description" : "The trace level for the LIR generator."
}, {
  "type" : "RUNTIME",
  "name" : "TraceMonitorsMethodFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Trace monitor operations in methods whose fully qualified name contains this substring."
}, {
  "type" : "RUNTIME",
  "name" : "TraceMonitorsTypeFilter",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Trace monitor operations on objects whose type contains this substring."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceParserPlugins",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Traces use of plugins during bytecode parsing."
}, {
  "type" : "RUNTIME",
  "name" : "±TraceUnwindStub",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Trace execution of the stub that routes an exception to a handler in the calling frame."
}, {
  "type" : "RUNTIME",
  "name" : "±TrackAccessChain",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the callers for methods and accessing methods for fields."
}, {
  "type" : "RUNTIME",
  "name" : "±TrackInputFlows",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the input for type flows."
}, {
  "type" : "RUNTIME",
  "name" : "TrackMemUse",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An empty value enables all memory use trackers unconditionally."
}, {
  "type" : "RUNTIME",
  "name" : "±TrackNodeInsertion",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track source stack trace where a node was inserted into the graph."
}, {
  "type" : "RUNTIME",
  "name" : "±TrackNodeSourcePosition",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Track the NodeSourcePosition."
}, {
  "type" : "RUNTIME",
  "name" : "TrivialInliningSize",
  "dataType" : "LONG",
  "defaultValue" : 10,
  "description" : "Graphs with less than this number of nodes are trivial and therefore always inlined."
}, {
  "type" : "RUNTIME",
  "name" : "TruffleCompilerConfiguration",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration)."
}, {
  "type" : "RUNTIME",
  "name" : "±TruffleHostInlining",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Whether Truffle host inlining is enabled."
}, {
  "type" : "RUNTIME",
  "name" : "TruffleHostInliningBaseBudget",
  "dataType" : "LONG",
  "defaultValue" : 5000,
  "description" : "Maximum budget for Truffle host inlining for runtime compiled methods."
}, {
  "type" : "RUNTIME",
  "name" : "TruffleHostInliningByteCodeInterpreterBudget",
  "dataType" : "LONG",
  "defaultValue" : 100000,
  "description" : "Maximum budget for Truffle host inlining for runtime compiled methods with a BytecodeInterpreterSwitch annotation."
}, {
  "type" : "RUNTIME",
  "name" : "TruffleHostInliningMaxExplorationDepth",
  "dataType" : "LONG",
  "defaultValue" : 1000,
  "description" : "Determines the maximum call depth for exploration during host inlining."
}, {
  "type" : "RUNTIME",
  "name" : "±TruffleHostInliningPrintExplored",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "When logging is activated for this phase enables printing of only explored, but ultimately not inlined call trees."
}, {
  "type" : "RUNTIME",
  "name" : "±TrustFinalDefaultFields",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Determines whether to treat final fields with default values as constant."
}, {
  "type" : "RUNTIME",
  "name" : "TypeCheckMaxHints",
  "dataType" : "LONG",
  "defaultValue" : 2,
  "description" : "The maximum number of profiled types that will be used when compiling a profiled type check. Note that TypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks."
}, {
  "type" : "RUNTIME",
  "name" : "TypeCheckMinProfileHitProbability",
  "dataType" : "DOUBLE",
  "defaultValue" : 0.5,
  "description" : "If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the type check will be compiled without profiling info."
}, {
  "type" : "RUNTIME",
  "name" : "TypeFlowSaturationCutoff",
  "dataType" : "LONG",
  "defaultValue" : 20,
  "description" : "The maximum number of types recorded in a type flow. -1 indicates no limitation."
}, {
  "type" : "RUNTIME",
  "name" : "±UnresolvedIsError",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Report unresolved elements as errors."
}, {
  "type" : "RUNTIME",
  "name" : "UnrollMaxIterations",
  "dataType" : "LONG",
  "defaultValue" : 16,
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±UseBranchesWithin32ByteBoundary",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for more details. If not set explicitly, the default value will be determined according to the CPU model."
}, {
  "type" : "RUNTIME",
  "name" : "±UseCompilationStatistics",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Enables CompilationStatistics."
}, {
  "type" : "RUNTIME",
  "name" : "±UseExceptionProbability",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±UseGraalStubs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code."
}, {
  "type" : "RUNTIME",
  "name" : "±UseLoopEndFrequencies",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Derive loop frequencies only from backedge frequencies instead of from loop exit frequencies."
}, {
  "type" : "RUNTIME",
  "name" : "±UseLoopLimitChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±UseSnippetGraphCache",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a cache for snippet graphs."
}, {
  "type" : "RUNTIME",
  "name" : "±UseSnippetTemplateCache",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use a LRU cache for snippet templates."
}, {
  "type" : "RUNTIME",
  "name" : "±UseTrappingNullChecks",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Use traps for null checks instead of explicit null-checks."
}, {
  "type" : "RUNTIME",
  "name" : "±UseTypeCheckHints",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±VerboseGC",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print more information about the heap before and after each collection."
}, {
  "type" : "RUNTIME",
  "name" : "Verify",
  "dataType" : "STRING",
  "defaultValue" : "None",
  "description" : "Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyBalancedMonitors",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Emit extra code to dynamically check monitor operations are balanced."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyGraalGraphEdges",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform expensive verification of graph inputs, usages, successors and predecessors."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyGraalGraphs",
  "dataType" : "STRING",
  "defaultValue" : "+",
  "description" : "Verify graphs often during compilation when assertions are turned on."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyGraalPhasesSize",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify before - after relation of the relative, computed, code size of a graph."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyHeapAtReturn",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Perform platform dependent validation of the Java heap at returns."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyKillCFGUnusedNodes",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Verify that there are no new unused nodes when performing killCFG."
}, {
  "type" : "RUNTIME",
  "name" : "±VerifyPhases",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
}, {
  "type" : "RUNTIME",
  "name" : "±WarnMissingIntrinsic",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Print a warning when a missing intrinsic is seen."
}, {
  "type" : "RUNTIME",
  "name" : "±WriteableCodeCache",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : "Allocate code cache with write access, allowing inlining of objects."
}, {
  "type" : "RUNTIME",
  "name" : "±ZapStackOnMethodEntry",
  "dataType" : "STRING",
  "defaultValue" : "-",
  "description" : ""
} ]